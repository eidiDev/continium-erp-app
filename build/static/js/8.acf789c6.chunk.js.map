{"version":3,"sources":["routes/administrator/CadTaxaHora/ListTaxaHora.js","routes/administrator/CadTaxaHora/expert.js","routes/administrator/CadTaxaHora/index.js"],"names":["columns","title","dataIndex","key","render","text","type","toUpperCase","model","ListTaxaHora","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchLeftList","api","get","concat","then","result","setState","data","catch","error","console","log","state","_this2","react_default","a","createElement","LeftList","onRowClick","record","rowIndex","onClick","event","onClickRow","Component","Option","Select","TaxaHoraExpert","onHandleClickNew","setStateNew","handleOnClickRow1","parent","assertThisInitialized","loading","loadingTip","setTimeout","id","message","success","setStateEdit","onHandleClickSave","isok","pwd","prompt","user","METHOD","URL","isNew","cod","valor","tipo","method","url","leftListChild","current","onCancel","history","replace","document","location","reload","onHandleClickDelete","Modal","confirm","onOk","canSave","canNew","canDelete","refreshLeftList","handleChange","newUser","target","name","value","CadTaxaHora_ListTaxaHora","ref","handleTip","Content","className","row","col","span","es_form","layout","size","card","lg","md","sm","xs","Item","label","input","disabled","onChange","es_select","loader","bind","React","createRef","spin","spinning","tip","es_button","block","TaxaHoras","expert"],"mappings":"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","file":"static/js/8.acf789c6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport api from '../../../util/Api';\r\nimport LeftList from '../../../components/LeftList';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Codigo',\r\n        dataIndex:'cod',\r\n        key: 'cod',\r\n        render: text => {\r\n            return text\r\n        }\r\n        //sorter: (a, b) => a.cod.length - b.cod.length,\r\n    },\r\n    {\r\n        title: 'Valor',\r\n        dataIndex:'valor',\r\n        key: 'valor',\r\n        type: \"number\"\r\n        //sorter: (a, b) => a.valor - b.valor\r\n        \r\n    },\r\n    {\r\n        title: 'Tipo',\r\n        dataIndex:'tipo',\r\n        key: 'tipo',\r\n        render: text => {\r\n            return text.toUpperCase()\r\n        }\r\n        //sorter: (a, b) => a.tipo.length - b.tipo.length\r\n    }\r\n]\r\n\r\nconst model = 'taxaHora';\r\n\r\nclass ListTaxaHora extends Component {\r\n    constructor(props) {\r\n        super()\r\n        \r\n        this.state = {\r\n            data: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchLeftList();\r\n    } \r\n\r\n    fetchLeftList = () => {\r\n        api.get(`${model}/`, {})\r\n        .then((result) => {\r\n            this.setState({\r\n                data: result.data.data\r\n            });\r\n        },)\r\n        .catch(function(error) {\r\n            console.log('error', error)\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <LeftList \r\n                columns={columns} \r\n                data={this.state.data} \r\n                onRowClick={(record, rowIndex) => {\r\n                    return {\r\n                        onClick : event => this.props.onClickRow(record, rowIndex)\r\n                    }\r\n                }}\r\n            />\r\n       </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default ListTaxaHora;","import React, {Component} from 'react'\r\nimport {Row, Col, Card, Form, Input, Button,message,  Modal, Spin,Select} from 'antd'\r\n//Collapse\r\nimport history from '../../../util/history';\r\nimport ListTaxaHora from './ListTaxaHora';\r\nimport api from '../../../util/Api'\r\nimport '../Users/maktorTemplate.less'\r\nconst { Option } = Select;\r\n\r\n// const FormItem = Form.item\r\nconst model = 'TaxaHora';\r\n\r\n// const customPanelStyle = {\r\n//     borderRadius: 4,\r\n//     border: 0,\r\n//     overflow: 'hidden',\r\n// };\r\n\r\nclass TaxaHoraExpert extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {            \r\n            isNew: true,\r\n            loader: true,\r\n\t\t\tuser: {},\r\n\t\t\tcanNew: true,\r\n\t\t\tcanSave: true,\r\n            canDelete: false,\r\n            loading: false\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.setStateNew = this.setStateNew.bind(this);\r\n        this.onHandleClickSave = this.onHandleClickSave.bind(this);\r\n        \r\n        this.onHandleClickDelete = this.onHandleClickDelete.bind(this);\r\n        this.onHandleClickNew = this.onHandleClickNew.bind(this);\r\n        // this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.leftListChild = React.createRef();\r\n\r\n\r\n    }\r\n\r\n    onHandleClickNew = () => {\r\n        this.setStateNew()\r\n    }\r\n\r\n    handleOnClickRow1 = (record, rowIndex) => {\r\n        var parent = this\r\n        //Primeria coisa ele seta loading para true\r\n        this.setState({\r\n            loading:true,\r\n            loadingTip: 'Carregando registro, aguarde...'\r\n        })\r\n\r\n        //Coloquei esse timeout de 1 segundo para simular o carregamento\r\n        setTimeout(function(){\r\n            //Agora ele vai buscar o registro no servidor\r\n            api.get(`${model}/${record.id}`, {\r\n                })\r\n                .then((result) => {\r\n                    //Caso consiga recuperar o model, ele atualiza a tela e para de carregar\r\n                    // console.log(result.data.adresses);\r\n                    // console.log(result.adresses);\r\n                    message.success('Taxa Hora carregada com sucesso!');\r\n                    parent.setStateEdit(result.data)\r\n                },)\r\n                .catch(function(error) { \r\n                    // console.log(error);\r\n                    message.error('Erro ao buscar registro, tente novamente mais tarde!');\r\n                    parent.setStateNew()\r\n                })\r\n        }, 1000);\r\n        \r\n    }\r\n\r\n    onHandleClickSave = () => {\r\n\r\n        let isok = 0;\r\n        var pwd = prompt(\"Para alterar o valor é necessário a senha.\");\r\n        if(pwd != null && pwd === '12345') {\r\n            isok = 1;\r\n        }else {\r\n            message.error('Senha incorreta!');\r\n        }\r\n        \r\n        if(!isok) { return };\r\n\r\n        // console.log(this.state.model);\r\n        let record = this.state.user;\r\n        var parent = this;\r\n\r\n        this.setState({\r\n            loading:true,\r\n            loadingTip: 'Salvando registro, aguarde...',\r\n        })\r\n        // console.log('vai tentar gravar',record)\r\n        setTimeout(function(){\r\n            //Verifica se é uma atualizacao (PUT) ou novo registro (POST)\r\n            let METHOD = 'PATCH'\r\n            let URL = `${model}/${record.id}`\r\n            \r\n            if(parent.state.isNew){\r\n                METHOD = 'POST'\r\n                URL = `${model}`\r\n                // record = Object.assign({},record)\r\n            }\r\n            // console.log('onHandleSaveButton', record);\r\n            const {cod, valor, tipo} = record;\r\n       \r\n            api(\r\n                {\r\n                method: METHOD,\r\n                url: URL,\r\n                data:\r\n                {\r\n                    cod: cod,\r\n                    valor: valor,\r\n                    tipo: tipo\r\n                } \r\n            }).then((result) => {\r\n                //Caso consiga recuperar o model, ele atualiza a tela e para de carregar\r\n                message.success('Taxa hora salva com sucesso!');\r\n                // console.log(result.data);\r\n                parent.setStateEdit(result.data)\r\n                parent.leftListChild.current.fetchLeftList()\r\n            },)\r\n            .catch(function(error) { \r\n                // console.log(error);\r\n                parent.setStateEdit(record)\r\n                message.error('Erro ao gravar registro, tente novamente mais tarde!');\r\n            })\r\n        }, 1000);\r\n    }\r\n\r\n    onCancel = () => {\r\n        history.replace('/dashboard');\r\n        document.location.reload(true);\r\n    }\r\n    \r\n    onHandleClickDelete = () => {\r\n        // console.log(this.state.model);\r\n        let record = this.state.user\r\n        var parent = this\r\n\r\n        Modal.confirm({\r\n            title: 'Tem certeza que deseja excluir esse registro?',\r\n            onOk() {\r\n                parent.setState({\r\n                    loading:true,\r\n                    loadingTip: 'Excluindo registro, aguarde...',\r\n                })\r\n                setTimeout(function(){\r\n                    //Agora ele vai buscar o registro no servidor\r\n                    let METHOD = 'DELETE'\r\n                    let URL = `${model}/${record.id}`\r\n                    api({\r\n                        method: METHOD,\r\n                        url: URL,\r\n                    }).then((result) => {\r\n                        //Caso consiga recuperar o model, ele atualiza a tela e para de carregar\r\n                        message.success('Registro excluido com sucesso!');\r\n                        parent.setStateNew()\r\n                        parent.leftListChild.current.fetchLeftList()\r\n                    },)\r\n                    .catch(function(error) { \r\n                        // console.log(error);\r\n                        message.error('Erro ao excluir registro, tente novamente mais tarde!');\r\n                    })\r\n                }, 1000);\r\n                parent.setStateNew()\r\n            },\r\n            onCancel() {\r\n                //Nada acontece\r\n            },\r\n          });\r\n    }\r\n\r\n    setStateNew = () => {\r\n        this.setState({ \r\n            canSave: true,\r\n            canNew: true,\r\n            canDelete: false,\r\n            user: {},\r\n            loading: false,\r\n            isNew: true,\r\n            refreshLeftList: false\r\n        });\r\n    }\r\n\r\n    //Seta o estado para edição\r\n    setStateEdit = (model) => {\r\n        // console.log(model);\r\n        this.setState({ \r\n            canSave: true,\r\n            canNew: true,\r\n            canDelete: true,\r\n            user: model,\r\n            loading: false,\r\n            isNew: false\r\n        });\r\n    }\r\n\r\n    handleChange = event => {\r\n\r\n        let newUser = this.state.user;\r\n        newUser[event.target.name] = event.target.value;\r\n\r\n        this.setState(() => ({\r\n            user: newUser\r\n        }))\r\n    }\r\n\r\n    LeftList = () => {\r\n        return (\r\n            <ListTaxaHora onClickRow={this.handleOnClickRow1}  ref={this.leftListChild} />\r\n        )\r\n    }\r\n\r\n    handleTip = event =>{\r\n        console.log(event);\r\n        let newUser = this.state.user;\r\n        newUser[\"tipo\"] = event;\r\n        this.setState({\r\n            user: newUser\r\n        });\r\n    }\r\n\r\n    Content = (user) => {\r\n        return (\r\n            <div className=\"main\">\r\n                <Row>\r\n                    <Col span={24}>\r\n                        <Form layout=\"horizontal\" size=\"small\" >\r\n                            <Card type=\"inner\" title=\"Cadastro de Taxa Hora\">\r\n                                <Row>\r\n                                    <Col lg={6} md={8} sm={12} xs={24} >\r\n                                        <div className=\"gx-form-row0\">\r\n                                            <Form.Item label=\"Código\">\r\n                                                    <Input \r\n                                                        type=\"text\" \r\n                                                        value={user.cod}\r\n                                                        name=\"cod\"\r\n                                                        disabled={this.state.isNew ? false : true}\r\n                                                        onChange={this.handleChange}/>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    <Col lg={6} md={8} sm={12} xs={24} >\r\n                                        <div className=\"gx-form-row0\">\r\n                                            <Form.Item label=\"Valor\">\r\n                                                    <Input \r\n                                                        type=\"number\" \r\n                                                        value={user.valor}\r\n                                                        name=\"valor\"\r\n                                                        onChange={this.handleChange}/>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    <Col lg={6} md={8} sm={12} xs={24} >\r\n                                        <div className=\"gx-form-row0\">\r\n                                            <Form.Item label=\"Tipo\">\r\n                                                <Select \r\n                                                    value={user.tipo} \r\n                                                    // style={{ width: 200 }} \r\n                                                    onChange={this.handleTip}\r\n                                                >\r\n                                                    <Option value={\"maquina\"}>Maquina</Option>\r\n                                                    <Option value={\"montagem\"}>Montagem</Option>\r\n                                                </Select>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n\r\n\t}\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Spin spinning={this.state.loading} tip={this.state.loadingTip}>\r\n                <Row>\r\n                    <Col lg={5} md={5} sm={24} xs={24}>\r\n                            {this.LeftList()}\r\n                    </Col>\r\n\r\n                    <Col lg={15} md={15} sm={24} xs={24}>\r\n                        {this.Content(this.state.user)}\r\n                    </Col>\r\n\r\n                    <Col lg={4} md={4} sm={24} xs={24}>\r\n                        <Card type=\"inner\" title=\"Taxa Hora\">\r\n                            <Button \r\n                                block\r\n                                type=\"primary\"\r\n                                className=\"gx-btn-secondary\"\r\n                                disabled={!this.state.canNew}\r\n                                onClick={this.onHandleClickNew}\r\n                            >\r\n                                Novo\r\n                            </Button>\r\n                            <Button \r\n                                block\r\n                                type=\"primary\"\r\n                                onClick={this.onHandleClickSave}\r\n                                disabled={!this.state.canSave}\r\n                            >\r\n                                Salvar\r\n                            </Button>\r\n                            <br/>\r\n                            <Button \r\n                                block\r\n                                disabled={!this.state.canDelete} \r\n                                type=\"primary\"\r\n                                onClick={this.onHandleClickDelete}\r\n                                className=\"gx-btn-red\"\r\n                            >\r\n                                Excluir\r\n                            </Button>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Spin>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TaxaHoraExpert","import React from 'react'\r\nimport TaxaHoraExpert from './expert'\r\n\r\n// const TabPane = Tabs.TabPane\r\n\r\n\r\nconst TaxaHoras = () => {\r\n    return (\r\n        <TaxaHoraExpert />\r\n    )\r\n};\r\n\r\nexport default TaxaHoras;"],"sourceRoot":""}
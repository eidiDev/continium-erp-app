{"version":3,"sources":["routes/production/ManagementPriority/ImportOrdersFoxForm.js","routes/production/ManagementPriority/ImportOrdersFoxResults.js","routes/production/ManagementPriority/Log.js","routes/production/ManagementPriority/index.js"],"names":["ImportOrdersFoxForm","listOfMaquinas","this","props","react_default","a","createElement","row","col","span","card","type","title","es_form","layout","size","lg","md","sm","xs","className","Item","label","es_select","style","width","showSearch","placeholder","onChange","handleMaquina","filterOption","inputValue","option","children","concat","toUpperCase","indexOf","map","e","Option","value","cod","name","Component","ImportOrdersFoxResults","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getColumnSearchProps","dataIndex","filterDropdown","_ref","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","input","ref","node","searchInput","target","onPressEnter","handleSearch","marginBottom","display","es_button","onClick","icon","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","tag","state","searchedColumn","main_default","highlightStyle","backgroundColor","searchWords","searchText","autoEscape","textToHighlight","setState","changeOrder","event","id","prioridadeEtapa","parseInt","_this2","columns1","key","align","objectSpread","min","defaultValue","disabled","statusEtapa","moment","format","spin","spinning","table","scroll","x","y","rowSelection","selectedRowKeys","onSelectChange","columns","onChangePage","sorter","bordered","dataSource","resultData","margin","loading","rowKey","Log","modal","showLog","onOk","onOkLog","onCancel","bodyStyle","footer","timeline","logs","item","React","api","defaults","timeout","ImportOrdersFox","getMaquinas","get","then","result","taxMaquinas","data","filter","o","catch","error","console","log","handleChange","filtros","page","pageSize","onHandleClickSearch","resultsLoading","parent","assertThisInitialized","apiAdonis","params","message","success","selectedRows","onKeyDown","onCreateBasicData","asyncToGenerator","regenerator_default","mark","_callee","selectRows","wrap","_context","prev","next","method","url","rows","stop","onCreateOrders","_callee2","_context2","array","find","spe","t0","onChangeStatus","_ref3","_callee3","idMaquina","_context3","getDataFromServer","_x","apply","arguments","mudarPrioridade","_callee4","_context4","checkIfAllstatusIsOk","listaDeSelects","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","linhas","el","isDadosBaseOk","push","err","return","selected","_ref5","_callee5","offset","dataToReturn","_context5","response","abrupt","_x2","_x3","setStateDrag","_ref6","_callee6","newData","listUpdate","index","_context6","forEach","lane","opmUpdate","maquina","montagem","patch","_x4","loadingTip","canGenerate","array2","pedido","pedidoCliente","cfop","produto","empresa","dataInicio","dataFim","dataInicioM","dataFimM","tip","Log_Log","ImportOrdersFoxForm_ImportOrdersFoxForm","moveRow","ImportOrdersFoxResults_ImportOrdersFoxResults","block","lassName"],"mappings":"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","file":"static/js/18.13aa2e61.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Card, \r\n        Form, \r\n        Input, \r\n        Row, \r\n        Col, \r\n        DatePicker,\r\n        Select\r\n    } from 'antd';\r\n// import locale from 'moment/locale/pt-br';\r\n// import moment from 'moment';\r\n/**\r\n * Esse form é responsável por gerenciar os campos da tela de import\r\n * POrem as actions virão do component pai.\r\n */\r\nexport default class ImportOrdersFoxForm extends Component {\r\n\r\n    render () {\r\n        const { listOfMaquinas } = this.props;\r\n        return(\r\n            <Row>\r\n                <Col span={24}>\r\n                    <Card type=\"inner\" title=\"Gerenciamento de Prioridades\">\r\n                        <Form layout=\"horizontal\" size=\"small\">\r\n                            <Row>\r\n\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Maquinas\">\r\n                                    <Select\r\n                                        style={{ width: 400 }}\r\n                                        showSearch\r\n                                        placeholder=\"Filtrar por maquina\"\r\n                                        onChange={this.props.handleMaquina}\r\n                                        filterOption={(inputValue, option) =>\r\n                                            option.props.children[0]\r\n                                            .concat(\r\n                                                option.props.children[1],\r\n                                                option.props.children[2]\r\n                                            )\r\n                                            .toUpperCase()\r\n                                            .indexOf(inputValue.toUpperCase()) !== -1\r\n                                        }\r\n                                        >\r\n                                        {listOfMaquinas.map((e) => {\r\n                                            return (\r\n                                            <Select.Option value={e.cod}>\r\n                                                {e.cod}-{e.name}\r\n                                            </Select.Option>\r\n                                            );\r\n                                        })}\r\n                                    </Select>\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n                            \r\n                            {/* <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Data final\">\r\n                                        <DatePicker \r\n                                            // locale={locale}\r\n                                            // defaultValue={moment()}\r\n                                            format={\"DD-MM-YYYY\"} \r\n                                            onChange={this.props.handleChange('dataFim')} \r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"ID Pedido Venda\">\r\n                                        <Input \r\n                                            type=\"number\"\r\n                                            // style={{ width: 120 }}  \r\n                                            value={this.props.filtros.id_PedidoVenda}\r\n                                            name=\"id_PedidoVenda\"\r\n                                            onChange={this.props.handleChange('id_PedidoVenda')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Pedido Fox\">\r\n                                        <Input \r\n                                            type=\"text\"\r\n                                            // style={{ width: 120 }}  \r\n                                            value={this.props.filtros.pedido_fox}\r\n                                            name=\"pedido_fox\"\r\n                                            onChange={this.props.handleChange('pedido_fox')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Pedido Cliente\" >\r\n                                        <Input \r\n                                            type=\"text\" \r\n                                            // style={{ width: 120 }}\r\n                                            value={this.props.filtros.pedido_cliente}\r\n                                            name=\"pedido_cliente\"\r\n                                            onChange={this.props.handleChange('pedido_cliente')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col> */}\r\n\r\n                            {/* <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Codigo produto\" >\r\n                                        <Input \r\n                                            type=\"text\" \r\n                                            // style={{ width: 120 }}\r\n                                            // value={orderPro.pedidoCliente}\r\n                                            value={this.props.filtros.produto}\r\n                                            name=\"produto\"\r\n                                            onChange={this.props.handleChange('produto')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col> */}\r\n\r\n                            {/* <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"CFOP\" >\r\n                                        <Input \r\n                                            type=\"text\" \r\n                                            // style={{ width: 120 }}\r\n                                            // value={orderPro.pedidoCliente}\r\n                                            name=\"cfop\"\r\n                                            value={this.props.filtros.cfop}\r\n                                            onChange={this.props.handleChange('cfop')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col> */}\r\n\r\n                            {/* <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Cliente\" >\r\n                                        <Input \r\n                                            type=\"text\" \r\n                                            // style={{ width: 120 }}\r\n                                            // value={orderPro.pedidoCliente}\r\n                                            value={this.props.filtros.cliente}\r\n                                            name=\"cliente\"\r\n                                            onChange={this.props.handleChange('cliente')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Status\" >\r\n                                        <Input \r\n                                            type=\"text\" \r\n                                            // style={{ width: 120 }}\r\n                                            // value={orderPro.pedidoCliente}\r\n                                            value={this.props.filtros.status}\r\n                                            name=\"status\"\r\n                                            onChange={this.props.handleChange('status')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Tipo registro\" >\r\n                                        <Input \r\n                                            type=\"text\" \r\n                                            // style={{ width: 120 }}\r\n                                            // value={orderPro.pedidoCliente}\r\n                                            value={this.props.filtros.tipo_registro}\r\n                                            name=\"tipo_registro\"\r\n                                            onChange={this.props.handleChange('tipo_registro')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col> */}\r\n\r\n                            </Row>\r\n                        </Form>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Card, Table, Tag, Spin, Input, Button, Icon, Divider,Select } from 'antd';\r\nimport moment from 'moment';\r\nimport Highlighter from 'react-highlight-words';\r\n\r\n// const ReactDragListView = window[\"react-drag-listview\"];\r\n\r\n//const idAutoIncrement = require(\"id-auto-increment\");\r\n// var _ = require('lodash');\r\n// import api from '../../../util/Api';\r\n//let count = 0\r\n\r\n/**\r\n * Esse componente ira receber uma lista de resultados do fox, e ira apresentar num table.\r\n * @param resultaData É o array com os dados a serem apresentados\r\n * @type component\r\n * @author luiz.garcia\r\n * @since 30/07/2020\r\n */\r\nexport default class ImportOrdersFoxResults extends Component {\r\n  constructor(props) {\r\n    super();\r\n    // this.state = {\r\n    //     selectedRowKeys: []\r\n    // }\r\n    // this.data = [...props.resultData];\r\n\r\n    this.state = {\r\n      searchText: '',\r\n      searchedColumn: '',\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  // onSelectChange = selectedRowKeys => {\r\n  //     this.setState({selectedRowKeys});\r\n  // }\r\n\r\n\r\n  getColumnSearchProps = dataIndex => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          icon=\"search\"\r\n          size=\"small\"\r\n          style={{ width: 90, marginRight: 8 }}\r\n        >\r\n          Search\r\n        </Button>\r\n        <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n          Reset\r\n        </Button>\r\n      </div>\r\n    ),\r\n    filterIcon: filtered => (\r\n      <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\r\n    ),\r\n    onFilter: (value, record) =>\r\n      record[dataIndex]\r\n        .toString()\r\n        .toLowerCase()\r\n        .includes(value.toLowerCase()),\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select());\r\n      }\r\n    },\r\n    render: text => {\r\n      if (text === \"finalizada\") {\r\n        return <Tag color=\"green\">{text.toUpperCase()}</Tag>\r\n      }\r\n      if (text === \"execucao\") {\r\n        return <Tag color=\"orange\"> {text.toUpperCase()}</Tag>\r\n      }\r\n      if (text === \"planejada\") {\r\n        return <Tag color=\"purple\"> {text.toUpperCase()}</Tag>\r\n      }\r\n      if (text === \"liberada\") {\r\n        return <Tag color=\"blue\"> {text.toUpperCase()}</Tag>\r\n      }\r\n      if (text === \"pausada\") {\r\n        return <Tag color=\"red\"> {text.toUpperCase()}</Tag>\r\n      }\r\n      return this.state.searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text.toString()}\r\n        />\r\n      ) : (text)\r\n    }\r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  changeOrder = (event, record, id) => {\r\n    record.prioridadeEtapa = parseInt(event.target.value)\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    // const { selectedRowKeys } = this.props;\r\n\r\n    const columns1 = [\r\n      {\r\n        title: 'Cód. Maquina',\r\n        dataIndex: 'maquina',\r\n        width: 100,\r\n        key: 'maquina',\r\n        align: 'center'\r\n      },\r\n      {\r\n        title: 'Cód. Montagem',\r\n        dataIndex: 'montagem',\r\n        width: 100,\r\n        key: 'montagem',\r\n        align: 'center'\r\n      },\r\n      {\r\n        title: 'Status da Etapa',\r\n        dataIndex: 'statusEtapa',\r\n        render: (text) => {\r\n          if (text === \"finalizada\") {\r\n            return <Tag color=\"green\">{text.toUpperCase()}</Tag>\r\n          }\r\n          if (text === \"execucao\") {\r\n            return <Tag color=\"orange\"> {text.toUpperCase()}</Tag>\r\n          }\r\n          if (text === \"planejada\") {\r\n            return <Tag color=\"#EBEBEF\"> {text.toUpperCase()}</Tag>\r\n          }\r\n          if (text === \"liberada\") {\r\n            return <Tag color=\"blue\"> {text.toUpperCase()}</Tag>\r\n          }\r\n          if (text === \"pausada\") {\r\n            return <Tag color=\"red\"> {text.toUpperCase()}</Tag>\r\n          }\r\n        },\r\n        align: 'center',\r\n        ...this.getColumnSearchProps('statusEtapa'),\r\n      },\r\n      {\r\n        title: 'Prioridade Etapa',\r\n        dataIndex: 'prioridadeEtapa',\r\n        render: (text,record) => {\r\n          return(\r\n           <Input\r\n            onChange={(e) => this.changeOrder(e,record,record.id)}\r\n            key={record.id}\r\n            type=\"number\"\r\n            min={1}\r\n            defaultValue={text}\r\n            style={{ width: '100%' }}\r\n            disabled={record.statusEtapa === \"execucao\" ? true : false}\r\n           />\r\n          )\r\n        }\r\n      },\r\n\r\n      {\r\n        title: 'Ordem de Produção',\r\n        dataIndex: 'orderProduction',\r\n        ...this.getColumnSearchProps('orderProduction'),\r\n      },\r\n      {\r\n        title: 'Ordem Principal',\r\n        dataIndex: 'ordemPrincipal',\r\n        ...this.getColumnSearchProps('ordemPrincipal'),\r\n      },\r\n      {\r\n        title: 'Ped. Cliente',\r\n        dataIndex: 'pedidoCliente',\r\n        ...this.getColumnSearchProps('pedidoCliente'),\r\n      },\r\n      {\r\n        title: 'Ped. Venda',\r\n        dataIndex: 'orderFox',\r\n        ...this.getColumnSearchProps('orderFox'),\r\n      },\r\n      {\r\n        title: 'Cod. Produto',\r\n        dataIndex: 'product',\r\n        ...this.getColumnSearchProps('product'),\r\n      },\r\n      {\r\n        title: 'Produto',\r\n        dataIndex: 'description1',\r\n        ...this.getColumnSearchProps('description1'),\r\n      },\r\n      {\r\n        title: 'Qtde Prevista',\r\n        dataIndex: 'qtde',\r\n      },\r\n      {\r\n        title: 'Data Entrega',\r\n        dataIndex: 'dataEntrega',\r\n        //  key:'Emissão',\r\n        render: (text) => moment(text).format('DD-MM-YYYY'),\r\n        ...this.getColumnSearchProps('dataEntrega'),\r\n      },\r\n      {\r\n        title: 'Cliente',\r\n        dataIndex: 'cliente',\r\n        //  key:'isClienteOk',\r\n        align: 'center',\r\n        ...this.getColumnSearchProps('cliente'),\r\n      },\r\n\r\n\r\n      \r\n    ];\r\n\r\n\r\n    return (\r\n      <Spin spinning={false}>\r\n        <Card type=\"inner\" title=\"Maquinas\">\r\n            <Table\r\n              //expandedRowRender={record => <Table columns={columnsSub} pagination={{hideOnSinglePage: true}} size={'small'} dataSource={record.linhas}/> }\r\n              scroll={{ x: 2500, y: 2000 }}\r\n              //rowKey={(record) => record.key = 999}\r\n              rowSelection={{\r\n                selectedRowKeys: this.props.selectedRowKeys,\r\n                onChange: this.props.onSelectChange,\r\n              }}\r\n              columns={columns1}\r\n              onChange={this.props.onChangePage}\r\n              sorter={true}\r\n              bordered\r\n              size=\"small\"\r\n              dataSource={this.props.resultData}\r\n              style={{ margin: '-15px -24px' }}\r\n              loading={this.props.loading}\r\n              rowKey={(record) => record.id}\r\n            />\r\n          {/* <ReactDragListView {...this.dragProps}>\r\n            <Table\r\n              columns={this.columns}\r\n              pagination={false}\r\n              dataSource={this.state.data}\r\n            />\r\n          </ReactDragListView> */}\r\n        </Card>\r\n\r\n\r\n      </Spin>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {Modal, Card, Timeline, Button} from 'antd';\r\n\r\nexport default class Log extends React.Component {\r\n    render() {\r\n        return(\r\n            <Modal\r\n                title=\"Logs\"\r\n                visible={this.props.showLog}\r\n                onOk={this.props.onOkLog}\r\n                onCancel={this.props.onOkLog}\r\n                // onCancel={this.props.onCancel}\r\n                bodyStyle={{padding: 0 }}\r\n                // confirmLoading={this.props.confirmLoading}\r\n                footer={[\r\n                    <Button key=\"submit\" type=\"primary\" onClick={this.props.onOkLog}>\r\n                      Ok\r\n                    </Button>\r\n                ]}\r\n            >\r\n                <Card title=\"\" className=\"gx-card\">\r\n                    <Timeline>\r\n                        {\r\n                            this.props.logs.map(function(item) {\r\n                                var x = item.toString();\r\n                                return <Timeline.Item color={x.includes('não tem') ? \"red\": \"green\"}>{item}</Timeline.Item>        \r\n                            })\r\n                        }\r\n                        {/* <Timeline.Item color=\"green\">Create a services site 2015-09-01</Timeline.Item>\r\n                        <Timeline.Item color=\"red\">\r\n                        <p>Solve initial network problems 1</p>\r\n                        <p>Solve initial network problems 2</p>\r\n                        <p>Solve initial network problems 3 2015-09-01</p>\r\n                        </Timeline.Item>\r\n                        <Timeline.Item>\r\n                        <p>Technical testing 1</p>\r\n                        <p>Technical testing 2</p>\r\n                        <p>Technical testing 3 2015-09-01</p>\r\n                        </Timeline.Item> */}\r\n                    </Timeline>\r\n                </Card>\r\n            </Modal>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Row, Col, Card, Spin, Button, message } from 'antd';\r\nimport ImportOrdersFoxForm from './ImportOrdersFoxForm';\r\nimport ImportOrdersFoxResults from './ImportOrdersFoxResults';\r\nimport api from 'util/ApiAdonis';\r\nimport apiAdonis from 'util/ApiAdonis'\r\nimport Log from './Log';\r\nimport update from 'immutability-helper';\r\n\r\napi.defaults.timeout = 60000000;\r\n\r\nclass ImportOrdersFox extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loading: false,\r\n            loadingTip: '',\r\n            canGenerate: false,\r\n            resultsLoading: false,\r\n            showLog: false,\r\n            resultData: [],\r\n            array: [],\r\n            array2: [],\r\n            selectedRowKeys: [],\r\n            selectedRows: [],\r\n            filtros: {\r\n                pedido: '',\r\n                pedidoCliente: '',\r\n                cfop: '',\r\n                produto: '',\r\n                empresa: '',\r\n                dataInicio: '',\r\n                dataFim: '',\r\n                dataInicioM: '',\r\n                dataFimM: ''\r\n            },\r\n            logs: [],\r\n            listOfMaquinas: [],\r\n            idMaquina: ''\r\n        };\r\n\r\n        //this.setState({logs: this.state.logs.push('Criado produto 1', 'criado produto 2', 'criado produto 3')}); \r\n\r\n        // console.log('Import Ordens Fox....');\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getMaquinas();\r\n    }\r\n\r\n    getMaquinas = () => {\r\n        api\r\n            .get(`MachineLabor/`, {})\r\n            .then((result) => {\r\n                let dataMaq = [];\r\n                dataMaq = result.data.data;\r\n\r\n                let taxMaquinas = dataMaq.filter((o) => {\r\n                    return o.type === 'maquina' || o.type === 'montagem';\r\n                });\r\n                this.setState({\r\n                    listOfMaquinas: taxMaquinas,\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    handleChange = name => value => {\r\n        let filtros = this.state.filtros;\r\n\r\n        if (typeof (value) === \"object\") {\r\n            if (name === 'dataInicio' || name === 'dataFim') {\r\n                if (value) {\r\n                    filtros[name] = value.format('YYYY-MM-DD');\r\n                }\r\n            } else {\r\n                filtros[name] = value.target.value;\r\n            }\r\n        } else {\r\n            filtros[name] = value;\r\n        }\r\n\r\n        this.setState({ filtros });\r\n    }\r\n\r\n    onChangePage = (page, pageSize) => {\r\n        console.log(page, pageSize);\r\n    }\r\n\r\n    onHandleClickSearch = () => {\r\n        this.setState({ resultsLoading: true });\r\n        let parent = this;\r\n\r\n        this.setState({ resultData: [], selectedRowKeys: [] });\r\n\r\n        // console.log(this.state.filtros);\r\n\r\n        apiAdonis.get(`filterPdfVenda/`, {\r\n            params: this.state.filtros\r\n        })\r\n            .then((result) => {\r\n\r\n                parent.setState({\r\n                    resultData: result.data\r\n                });\r\n                message.success('Registros carregados.');\r\n            })\r\n            .catch(function (error) {\r\n                message.error('Erro ao buscar registro, tente novamente mais tarde!:' + error.message);\r\n                console.log('error', error)\r\n            })\r\n            .then(function () {\r\n                // always executed\r\n                parent.setState({ resultsLoading: false });\r\n            });\r\n    }\r\n\r\n    onSelectChange = (selectedRowKeys, selectedRows) => {\r\n        // console.log('selectedRowKeys');\r\n        // console.log(selectedRowKeys, selectedRows);\r\n\r\n        this.setState({ selectedRowKeys: selectedRowKeys, selectedRows: selectedRows });\r\n\r\n    }\r\n\r\n    /**\r\n    * Função que é usava para quando usuario apertar ENTER no teclado ele realizar a pesquisar\r\n    **/\r\n    onKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.onHandleClickSearch();\r\n        }\r\n    }\r\n\r\n    onCreateBasicData = async () => {\r\n        this.setState({ resultsLoading: true });\r\n        let selectRows = this.state.selectedRows;\r\n        let parent = this;\r\n        let METHOD = \"POST\";\r\n\r\n\r\n        console.log(selectRows);\r\n        await apiAdonis({\r\n            method: METHOD,\r\n            url: `foxControllerPd/onCreateBasicData`,\r\n            data: {\r\n                rows: selectRows\r\n            }\r\n        }).then(function (result) {\r\n            parent.setState({\r\n                resultData: [],\r\n                showLog: true,\r\n                logs: result.data,\r\n                resultsLoading: false\r\n            });\r\n\r\n            message.success('Registros Criados Ou Alterados.');\r\n        })\r\n            .catch(function (error) {\r\n                message.error('Erro interno, tente novamente mais tarde!:' + error.message);\r\n                console.log('error', error)\r\n            })\r\n            .then(function (e) {\r\n                // always executed\r\n                parent.setState({ resultsLoading: false });\r\n            });\r\n\r\n        // if(req){\r\n\r\n        // }else{\r\n        //     message.error(\"ERRO\");\r\n        // }\r\n    }\r\n\r\n    onCreateOrders = async () => {\r\n\r\n        console.log('onCreateOrders....');\r\n\r\n        this.setState({ resultsLoading: true });\r\n        let selectRows = this.state.selectedRows;\r\n        let parent = this;\r\n\r\n        let METHOD = \"POST\";\r\n\r\n        try {\r\n            await apiAdonis({\r\n                method: METHOD,\r\n                //url: `Fox/createOrders`,\r\n                url: `foxControllerPd/onCreateOrders`,\r\n                data: {\r\n                    rows: selectRows\r\n                }\r\n            }).then(function (result) {\r\n\r\n                parent.setState({\r\n                    resultData: [],\r\n                    showLog: true,\r\n                    logs: result.data !== undefined ? result.data : [],\r\n                    array: []\r\n                })\r\n\r\n                if (result.data.find(spe => spe.includes('não tem'))) {\r\n                    message.error('Kits filhos nao tem Etapas !');\r\n                } else {\r\n                    message.success('Ordens criadas !');\r\n                }\r\n            }).catch(function (error) {\r\n                message.error('Erro interno, tente novamente mais tarde!:' + error.message);\r\n                console.log('error', error)\r\n            })\r\n                .then(function (e) {\r\n                    // always executed\r\n                    parent.setState({ resultsLoading: false });\r\n                });\r\n\r\n        } catch (error) {\r\n            message.error('Erro interno, tente novamente mais tarde!:' + error.message);\r\n            console.log('error', error)\r\n        }\r\n    }\r\n\r\n    onChangeStatus = async (type) => {\r\n        console.log('onCreateOrders....');\r\n\r\n        this.setState({ resultsLoading: true });\r\n        let selectRows = this.state.selectedRows;\r\n        let parent = this;\r\n        let idMaquina = this.state.idMaquina;\r\n\r\n        let METHOD = \"POST\";\r\n\r\n        try {\r\n            await apiAdonis({\r\n                method: METHOD,\r\n                //url: `Fox/createOrders`,\r\n                url: `changeStatusMaq`,\r\n                data: {\r\n                    type,\r\n                    rows: selectRows\r\n                }\r\n            }).then(function (result) {\r\n\r\n                parent.getDataFromServer(idMaquina)\r\n                parent.setState({\r\n                    resultsLoading: false,\r\n                })\r\n\r\n                message.success('Etapas atualizadas !');\r\n\r\n            }).catch(function (error) {\r\n                message.error('Erro interno, tente novamente mais tarde!:' + error.message);\r\n                console.log('error', error)\r\n            })\r\n                .then(function (e) {\r\n                    // always executed\r\n                    parent.setState({ resultsLoading: false });\r\n                });\r\n\r\n        } catch (error) {\r\n            message.error('Erro interno, tente novamente mais tarde!:' + error.message);\r\n            console.log('error', error)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Para fechar o modal do log\r\n     */\r\n    onOkLog = () => {\r\n        this.setState({\r\n            showLog: false,\r\n        });\r\n    }\r\n\r\n    mudarPrioridade = async () => {\r\n        console.log('onCreateOrders....');\r\n\r\n        this.setState({ resultsLoading: true });\r\n        let selectRows = this.state.selectedRows;\r\n        let parent = this;\r\n        let idMaquina = this.state.idMaquina;\r\n\r\n        let METHOD = \"POST\";\r\n\r\n        try {\r\n            await apiAdonis({\r\n                method: METHOD,\r\n                //url: `Fox/createOrders`,\r\n                url: `changePriorMaq`,\r\n                data: {\r\n                    idMaquina,\r\n                    rows: selectRows\r\n                }\r\n            }).then(function (result) {\r\n\r\n                parent.getDataFromServer(idMaquina)\r\n                parent.setState({\r\n                    resultsLoading: false,\r\n                })\r\n\r\n                message.success('Etapas atualizadas !');\r\n\r\n            }).catch(function (error) {\r\n                message.error('Erro interno, tente novamente mais tarde!:' + error.message);\r\n                console.log('error', error)\r\n            })\r\n                .then(function (e) {\r\n                    // always executed\r\n                    parent.setState({ resultsLoading: false });\r\n                });\r\n\r\n        } catch (error) {\r\n            message.error('Erro interno, tente novamente mais tarde!:' + error.message);\r\n            console.log('error', error)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    checkIfAllstatusIsOk = (selectedRows) => {\r\n        let listaDeSelects = selectedRows;\r\n\r\n        if (listaDeSelects.length === 0) {\r\n            this.setState({\r\n                array: []\r\n            })\r\n        } else {\r\n            let array = [];\r\n            for (const iterator of listaDeSelects) {\r\n                const find = iterator.linhas.find(el => el.isDadosBaseOk === 0);\r\n\r\n                if (find === undefined) {\r\n                    array.push(iterator);\r\n                    this.setState({\r\n                        array: array\r\n                    });\r\n                }\r\n\r\n            }\r\n            if (array.length === listaDeSelects.length) {\r\n\r\n            } else {\r\n                this.setState({\r\n                    array: []\r\n                })\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    handleMaquina = (selected) => {\r\n        this.setState({ idMaquina: selected });\r\n        this.getDataFromServer(selected)\r\n    };\r\n\r\n    getDataFromServer = async (idMaquina, offset) => {\r\n        let dataToReturn = {};\r\n        this.setState({ resultsLoading: true });\r\n        const params = {\r\n            offset\r\n        }\r\n        await api\r\n            .get(`/prioridade?idMaquina=${idMaquina}`, { params })\r\n            .then((result) => {\r\n                dataToReturn = result.data;\r\n                this.setState({\r\n                    resultData: dataToReturn,\r\n                    resultsLoading: false\r\n                })\r\n            })\r\n            .then((response) => {\r\n                // this.setState({ loading: false });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n        return dataToReturn;\r\n    };\r\n\r\n    setStateDrag = async (newData) => {\r\n        const { idMaquina} = this.state;\r\n        this.setState({ resultsLoading: true });\r\n        let listUpdate = [];\r\n        let index = 0;\r\n        newData.forEach((lane) => {\r\n            index += 1;\r\n            const opmUpdate = {\r\n              id: lane.id,\r\n              statusEtapa: lane.statusEtapa,\r\n              maquina: lane.maquina === null || lane.maquina === undefined ? lane.montagem : lane.maquina,\r\n              index,\r\n            };\r\n            listUpdate.push(opmUpdate);\r\n        });\r\n    \r\n        //Agora via enviar e atualizar no banco\r\n        // console.log(listUpdate);\r\n        await api\r\n          .patch('/prioridade', { listUpdate, idMaquina })\r\n          .then((result) => {\r\n            // console.log(result.data);\r\n            // const dataFromServer = this.getDataFromServer(idMaquina);\r\n            this.setState({ resultData: result.data,\r\n                resultsLoading:false\r\n            });\r\n          })\r\n          .then((result) => {\r\n            this.setState({ loading: false, resultsLoading:false });\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n    }\r\n    render() {\r\n        return (\r\n            <Spin spinning={this.state.loading} tip={this.state.loadingTip}>\r\n                <Log\r\n                    showLog={this.state.showLog}\r\n                    onOkLog={this.onOkLog}\r\n                    logs={this.state.logs}\r\n                />\r\n                <Row>\r\n                    <Col lg={20} md={20} sm={24} xs={24}>\r\n                        <ImportOrdersFoxForm\r\n                            handleMaquina={this.handleMaquina}\r\n                            listOfMaquinas={this.state.listOfMaquinas}\r\n                            handleChange={this.handleChange}\r\n                            moveRow={this.moveRow}\r\n                            filtros={this.state.filtros}\r\n                            onKeyDown={this.onKeyDown}\r\n                        />\r\n                        <ImportOrdersFoxResults\r\n                            resultData={this.state.resultData}\r\n                            loading={this.state.resultsLoading}\r\n                            selectedRowKeys={this.state.selectedRowKeys}\r\n                            onSelectChange={this.onSelectChange}\r\n                            onChangePage={this.onChangePage}\r\n                            setStateDrag={this.setStateDrag}\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col lg={4} md={4} sm={24} xs={24}>\r\n                        <Card type=\"inner\" title=\"Açoes\">\r\n                            <Button\r\n                                block\r\n                                type=\"primary\"\r\n                                className=\"gx-btn-purple\"\r\n                                disabled={!this.state.selectedRows.length > 0}\r\n                                onClick={() => this.onChangeStatus('planejada')}\r\n                            >\r\n                                Planejada\r\n                            </Button>\r\n\r\n                            <Button\r\n                                block\r\n                                type=\"primary\"\r\n                                lassName=\"gx-btn-blue\"\r\n                                disabled={!this.state.selectedRows.length > 0}\r\n                                onClick={() => this.onChangeStatus('liberada')}\r\n                            >\r\n                                Liberada\r\n                            </Button>\r\n\r\n                            <Button\r\n                                block\r\n                                type=\"primary\"\r\n                                className=\"gx-btn-orange\"\r\n                                disabled={!this.state.selectedRows.length > 0}\r\n                                onClick={() => this.onChangeStatus('execucao')}\r\n                            >\r\n                                Em Execução\r\n                            </Button>\r\n\r\n                            <Button\r\n                                block\r\n                                type=\"primary\"\r\n                                className=\"gx-btn-red\"\r\n                                disabled={!this.state.selectedRows.length > 0}\r\n                                onClick={() => this.onChangeStatus('pausada')}\r\n                            >\r\n                                Pausada\r\n                            </Button>\r\n\r\n                            <Button\r\n                                block\r\n                                type=\"primary\"\r\n                                className=\"gx-btn-secondary\"\r\n                                disabled={!this.state.selectedRows.length > 0}\r\n                                onClick={() => this.onChangeStatus('finalizada')}\r\n                            >\r\n                                Finalizada\r\n                            </Button>\r\n\r\n                            <Button\r\n                                block\r\n                                type=\"primary\"\r\n                                className=\"gx-btn-dark\"\r\n                                disabled={!this.state.selectedRows.length > 0}\r\n                                onClick={() => this.mudarPrioridade()}\r\n                            >\r\n                                Mudar Prioridade\r\n                            </Button>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Spin>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImportOrdersFox;"],"sourceRoot":""}
{"version":3,"sources":["routes/administrator/ImportOrdersFox/ImportOrdersFoxForm.js","routes/administrator/ImportOrdersFox/ImportOrdersFoxResults.js","routes/administrator/ImportOrdersFox/Log.js","routes/administrator/ImportOrdersFox/index.js"],"names":["ImportOrdersFoxForm","react_default","a","createElement","row","col","span","card","type","title","es_form","layout","size","lg","md","sm","xs","className","Item","label","date_picker","format","onChange","this","props","handleChange","input","value","filtros","pedido","name","onKeyDown","pedidoCliente","produto","cfop","empresa","Component","columns","dataIndex","width","key","align","render","text","moment","obj","LINHA01","LINHA02","tag","color","record","ImportOrdersFoxResults","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","spin","spinning","table","scroll","x","y","rowSelection","selectedRowKeys","onSelectChange","onChangePage","sorter","bordered","dataSource","resultData","style","margin","loading","rowKey","Math","random","Log","modal","visible","showLog","onOk","onOkLog","onCancel","bodyStyle","padding","footer","es_button","onClick","timeline","logs","map","item","toString","includes","React","api","defaults","timeout","ImportOrdersFox","_this","state","target","setState","page","pageSize","onHandleClickSearch","resultsLoading","parent","assertThisInitialized","get","params","then","result","data","message","success","catch","error","console","log","selectedRows","checkIfAllstatusIsOk","e","onCreateBasicData","asyncToGenerator","regenerator_default","mark","_callee","selectRows","wrap","_context","prev","next","method","url","rows","stop","onCreateOrders","_callee2","_context2","undefined","array","find","spe","listaDeSelects","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","isProdutoOk","isKitOk","isClienteOk","isEtapaOk","isOrdemOk","isDadosBaseOk","push","err","return","loadingTip","canGenerate","array2","dataInicio","dataFim","dataInicioM","dataFimM","tip","Log_Log","ImportOrdersFoxForm_ImportOrdersFoxForm","ImportOrdersFoxResults_ImportOrdersFoxResults","block","disabled"],"mappings":"iRAcqBA,mLAGb,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,KAAM,IACPL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,QAAQC,MAAM,+BACrBR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,OAAO,aAAaC,KAAK,SAC3BX,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC3Bf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,gBACXhB,EAAAC,EAAAC,cAACO,EAAA,EAAKQ,KAAN,CAAWC,MAAM,gBACblB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAGIC,OAAQ,aACRC,SAAUC,KAAKC,MAAMC,aAAa,mBAKlDxB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC3Bf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,gBACXhB,EAAAC,EAAAC,cAACO,EAAA,EAAKQ,KAAN,CAAWC,MAAM,cACblB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAGIC,OAAQ,aACRC,SAAUC,KAAKC,MAAMC,aAAa,gBAKlDxB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC3Bf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,gBACXhB,EAAAC,EAAAC,cAACO,EAAA,EAAKQ,KAAN,CAAWC,MAAM,gBACblB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACIlB,KAAK,OAELmB,MAAOJ,KAAKC,MAAMI,QAAQC,OAC1BC,KAAK,SACLR,SAAUC,KAAKC,MAAMC,aAAa,UAClCM,UAAWR,KAAKC,MAAMO,eAKtC9B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC3Bf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,gBACXhB,EAAAC,EAAAC,cAACO,EAAA,EAAKQ,KAAN,CAAWC,MAAM,kBACblB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACIlB,KAAK,OAELmB,MAAOJ,KAAKC,MAAMI,QAAQI,cAC1BF,KAAK,gBACLR,SAAUC,KAAKC,MAAMC,aAAa,iBAClCM,UAAWR,KAAKC,MAAMO,eAMtC9B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC3Bf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,gBACXhB,EAAAC,EAAAC,cAACO,EAAA,EAAKQ,KAAN,CAAWC,MAAM,kBACblB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACIlB,KAAK,OAGLmB,MAAOJ,KAAKC,MAAMI,QAAQK,QAC1BH,KAAK,UACLR,SAAUC,KAAKC,MAAMC,aAAa,WAClCM,UAAWR,KAAKC,MAAMO,eAMtC9B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC3Bf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,gBACXhB,EAAAC,EAAAC,cAACO,EAAA,EAAKQ,KAAN,CAAWC,MAAM,QACblB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACIlB,KAAK,OAGLsB,KAAK,OACLH,MAAOJ,KAAKC,MAAMI,QAAQM,KAC1BZ,SAAUC,KAAKC,MAAMC,aAAa,QAClCM,UAAWR,KAAKC,MAAMO,eAMtC9B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC3Bf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,gBACXhB,EAAAC,EAAAC,cAACO,EAAA,EAAKQ,KAAN,CAAWC,MAAM,WACblB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACIlB,KAAK,OAGLmB,MAAOJ,KAAKC,MAAMI,QAAQO,QAC1BL,KAAK,UACLR,SAAUC,KAAKC,MAAMC,aAAa,WAClCM,UAAWR,KAAKC,MAAMO,2BAxGjBK,iDCL3CC,EAAU,CAEZ,CACI5B,MAAO,eACP6B,UAAU,YACVC,MAAO,IACPC,IAAK,YACLC,MAAO,UAGX,CACIhC,MAAO,iBACP6B,UAAU,oBACVE,IAAI,qBAER,CACI/B,MAAO,aACP6B,UAAU,aACVE,IAAI,aACJE,OAAQ,SAACC,GAAD,OAAUC,IAAOD,GAAMtB,OAAO,gBAE1C,CACIZ,MAAO,UACP6B,UAAU,UACVE,IAAI,WAER,CACI/B,MAAO,WACP6B,UAAU,WACVE,IAAI,YAER,CACI/B,MAAO,eACP6B,UAAU,QACVE,IAAI,SAER,CACI/B,MAAO,oBACP6B,UAAU,UACVE,IAAI,WAER,CACI/B,MAAO,kBACP6B,UAAU,UACVE,IAAI,UACJE,OAAO,SAACC,EAAKE,GACT,OAAOA,EAAIC,QAAS,IAAKD,EAAIE,UAGrC,CACItC,MAAO,aACP6B,UAAU,MACVE,IAAI,MACJC,MAAO,UAEX,CACIhC,MAAO,OACP6B,UAAU,OACVE,IAAI,QAGR,CACI/B,MAAO,UACP6B,UAAU,cACVE,IAAI,cACJC,MAAO,SACPC,OAAQ,SAACC,GACL,OAAa,IAATA,EACQ1C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,QAAX,YAEAhD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,SAAX,QAKpB,CACIxC,MAAO,aACP6B,UAAU,UACVE,IAAI,UACJC,MAAO,SACPC,OAAQ,SAACC,GACL,OAAa,IAATA,EACQ1C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,SAAX,MAEAhD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,QAAX,cAIpB,CACIxC,MAAO,UACP6B,UAAU,cACVE,IAAI,cACJC,MAAO,SACPC,OAAQ,SAACC,EAAKO,GACV,OAAY,IAATP,EACS1C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,QAAX,YAEChD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,SAAX,QAIrB,CACIxC,MAAO,QACP6B,UAAU,YACVE,IAAI,YACJC,MAAO,SACPC,OAAQ,SAACC,EAAKO,GACV,OAAY,IAATP,EACS1C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,OAAX,aAEChD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,SAAX,QAIrB,CACIxC,MAAO,gBACP6B,UAAU,gBACVE,IAAI,gBACJC,MAAO,SACPF,MAAO,IACPG,OAAQ,SAACC,EAAKO,GACV,OAAY,IAATP,EACS1C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,OAAX,eAA6BhD,EAAAC,EAAAC,cAAA,WAA7B,oBAECF,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,SAAX,QAIrB,CACIxC,MAAO,YACP6B,UAAU,YACVE,IAAI,YACJC,MAAO,SACPC,OAAQ,SAACC,EAAKO,GACV,OAAY,IAATP,EACS1C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,OAAX,aAEChD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAKC,MAAM,SAAX,SAeJE,cAEjB,SAAAA,EAAY3B,GAAQ,OAAA4B,OAAAC,EAAA,EAAAD,CAAA7B,KAAA4B,GAAAC,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAjC,6EAchB,OACItB,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAMC,UAAU,GACZzD,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,QAAQC,MAAM,0BACrBR,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CACIC,OAAQ,CAAEC,EAAG,KAAMC,EAAG,KACtBC,aAAc,CACVC,gBAAiBzC,KAAKC,MAAMwC,gBAC5B1C,SAAUC,KAAKC,MAAMyC,gBAEzB5B,QAASA,EACTf,SAAUC,KAAKC,MAAM0C,aACrBC,QAAQ,EACRC,UAAQ,EACRxD,KAAK,QACLyD,WAAY9C,KAAKC,MAAM8C,WACvBC,MAAO,CAACC,OAAQ,eAChBC,QAASlD,KAAKC,MAAMiD,QACpBC,OAAQC,KAAKC,OAAO,EAAE,gBAjCMxC,wCC9J/ByC,mLAEb,OACI5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CACIrE,MAAM,OACNsE,QAASxD,KAAKC,MAAMwD,QACpBC,KAAM1D,KAAKC,MAAM0D,QACjBC,SAAU5D,KAAKC,MAAM0D,QAErBE,UAAW,CAACC,QAAS,GAErBC,OAAQ,CACJrF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAQ/C,IAAI,SAAShC,KAAK,UAAUgF,QAASjE,KAAKC,MAAM0D,SAAxD,QAKJjF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAME,MAAM,GAAGQ,UAAU,WACrBhB,EAAAC,EAAAC,cAACsF,EAAA,EAAD,KAEQlE,KAAKC,MAAMkE,KAAKC,IAAI,SAASC,GACzB,IAAI/B,EAAI+B,EAAKC,WACb,OAAO5F,EAAAC,EAAAC,cAACsF,EAAA,EAASvE,KAAV,CAAe+B,MAAOY,EAAEiC,SAAS,cAAa,MAAO,SAAUF,eAtBrEG,IAAM3D,WCIvC4D,IAAIC,SAASC,QAAU,QAEjBC,cACF,SAAAA,IAAc,IAAAC,EAAA,OAAAhD,OAAAC,EAAA,EAAAD,CAAA7B,KAAA4E,IACVC,EAAAhD,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAA+C,GAAA3C,KAAAjC,QA+BJE,aAAe,SAAAK,GAAI,OAAI,SAAAH,GACnB,IAAIC,EAAUwE,EAAKC,MAAMzE,QAEJ,kBAAXD,EACM,eAATG,GAAkC,YAATA,EACrBH,IACCC,EAAQE,GAAQH,EAAMN,OAAO,eAGjCO,EAAQE,GAAQH,EAAM2E,OAAO3E,MAGjCC,EAAQE,GAAQH,EAGpByE,EAAKG,SAAS,CAAC3E,cA/CLwE,EAkDdlC,aAAe,SAACsC,EAAMC,KAlDRL,EAsDdM,oBAAsB,WAClBN,EAAKG,SAAS,CAACI,gBAAgB,IAC/B,IAAIC,EAAMxD,OAAAyD,EAAA,EAAAzD,QAAAyD,EAAA,EAAAzD,CAAAgD,IAEVA,EAAKG,SAAS,CAACjC,WAAY,GAAIN,gBAAiB,KAIhDgC,IAAIc,IAAJ,OAAgB,CACZC,OAAQX,EAAKC,MAAMzE,UAEtBoF,KAAM,SAACC,GAEJL,EAAOL,SAAS,CACZjC,WAAY2C,EAAOC,OAkBvBC,IAAQC,QAAQ,2BAEnBC,MAAM,SAASC,GACZH,IAAQG,MAAM,wDAAwDA,EAAMH,SAC5EI,QAAQC,IAAI,QAASF,KAExBN,KAAK,WAEFJ,EAAOL,SAAS,CAACI,gBAAgB,OA9F3BP,EAkGdnC,eAAiB,SAACD,EAAgByD,GAG9BrB,EAAKG,SAAS,CAACvC,kBAAiByD,iBAEhCrB,EAAKsB,qBAAqBD,IAvGhBrB,EA6GdrE,UAAW,SAAC4F,GACM,UAAVA,EAAEnF,KACF4D,EAAKM,uBA/GCN,EAmHdwB,kBAnHcxE,OAAAyE,EAAA,EAAAzE,CAAA0E,EAAA5H,EAAA6H,KAmHM,SAAAC,IAAA,IAAAC,EAAArB,EAAA,OAAAkB,EAAA5H,EAAAgI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAChBjC,EAAKG,SAAS,CAACI,gBAAgB,IAC3BsB,EAAa7B,EAAKC,MAAMoB,aACxBb,EAHYxD,OAAAyD,EAAA,EAAAzD,QAAAyD,EAAA,EAAAzD,CAAAgD,IAIH,OAJG+B,EAAAE,KAAA,EAMVrC,YAAI,CACNsC,OAHS,OAITC,IAAG,sBACHrB,KAAM,CACFsB,KAAMP,KAEXjB,KAAK,SAASC,GACbL,EAAOL,SAAS,CACZjC,WAAY,GACZU,SAAS,EACTU,KAAMuB,EAAOC,KACbP,gBAAgB,IAGpBQ,IAAQC,QAAQ,qCAEnBC,MAAM,SAASC,GACZH,IAAQG,MAAM,6CAA6CA,EAAMH,SACjEI,QAAQC,IAAI,QAASF,KAExBN,KAAK,SAASW,GAEXf,EAAOL,SAAS,CAACI,gBAAgB,MA5BrB,wBAAAwB,EAAAM,SAAAT,MAnHN5B,EAyJdsC,eAzJctF,OAAAyE,EAAA,EAAAzE,CAAA0E,EAAA5H,EAAA6H,KAyJG,SAAAY,IAAA,IAAAV,EAAArB,EAAA,OAAAkB,EAAA5H,EAAAgI,KAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,cAEbd,QAAQC,IAAI,sBAEZpB,EAAKG,SAAS,CAACI,gBAAgB,IAC3BsB,EAAa7B,EAAKC,MAAMoB,aACxBb,EANSxD,OAAAyD,EAAA,EAAAzD,QAAAyD,EAAA,EAAAzD,CAAAgD,IAQA,OARAwC,EAAAP,KAAA,EAUPrC,YAAI,CACNsC,OAHS,OAITC,IAAG,mBACHrB,KAAM,CACFsB,KAAMP,KAEXjB,KAAK,SAASC,GAEbL,EAAOL,SAAS,CACZjC,WAAY,GACZU,SAAS,EACTU,UAAsBmD,IAAhB5B,EAAOC,KAAqBD,EAAOC,KAAO,GAChD4B,MAAM,KAGP7B,EAAOC,KAAK6B,KAAK,SAAAC,GAAG,OAAIA,EAAIlD,SAAS,gBACpCqB,IAAQG,MAAM,gCAEdH,IAAQC,QAAQ,sBAErBC,MAAM,SAASC,GACdH,IAAQG,MAAM,6CAA6CA,EAAMH,SACjEI,QAAQC,IAAI,QAASF,KAExBN,KAAK,SAASW,GAEXf,EAAOL,SAAS,CAACI,gBAAgB,MApCxB,wBAAAiC,EAAAH,SAAAE,MAzJHvC,EAoMdlB,QAAU,WACNkB,EAAKG,SAAS,CACVvB,SAAS,KAtMHoB,EA0MdsB,qBAAuB,SAACD,GACpB,IAAIwB,EAAiBxB,EAErB,GAA6B,IAA1BwB,EAAeC,OACd9C,EAAKG,SAAS,CACVuC,MAAO,SAEV,CACD,IAAIA,EAAQ,GADXK,GAAA,EAAAC,GAAA,EAAAC,OAAAR,EAAA,IAED,QAAAS,EAAAC,EAAuBN,EAAvBO,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlB,QAAAqB,MAAAP,GAAA,EAAuC,KAA5BM,EAA4BH,EAAA3H,MACP,IAAzB8H,EAASE,aACY,IAArBF,EAASG,SACgB,IAAzBH,EAASI,aACc,IAAvBJ,EAASK,WACc,IAAvBL,EAASM,WACkB,IAA3BN,EAASO,gBACRlB,EAAMmB,KAAKR,GACXrD,EAAKG,SAAS,CACVuC,MAAOA,MAXlB,MAAAoB,GAAAd,GAAA,EAAAC,EAAAa,EAAA,YAAAf,GAAA,MAAAI,EAAAY,QAAAZ,EAAAY,SAAA,WAAAf,EAAA,MAAAC,GAeEP,EAAMI,SAAWD,EAAeC,QAG/B9C,EAAKG,SAAS,CACVuC,MAAO,OAlOnB1C,EAAKC,MAAQ,CACT5B,SAAQ,EACR2F,WAAY,GACZC,aAAa,EACb1D,gBAAgB,EAChB3B,SAAS,EACTV,WAAY,GACZwE,MAAO,GACPwB,OAAO,GACPtG,gBAAiB,GACjByD,aAAc,GACd7F,QAAS,CACLC,OAAQ,GACRG,cAAe,GACfE,KAAK,GACLD,QAAS,GACTE,QAAS,GACToI,WAAY,GACZC,QAAS,GACTC,YAAa,GACbC,SAAU,IAEdhF,KAAM,IAxBAU,wEA6OV,OACInG,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAMC,SAAUnC,KAAK8E,MAAM5B,QAASkG,IAAKpJ,KAAK8E,MAAM+D,YACpDnK,EAAAC,EAAAC,cAACyK,EAAD,CACI5F,QAASzD,KAAK8E,MAAMrB,QACpBE,QAAS3D,KAAK2D,QACdQ,KAAMnE,KAAK8E,MAAMX,OAErBzF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC7Bf,EAAAC,EAAAC,cAAC0K,EAAD,CACIpJ,aAAcF,KAAKE,aACnBG,QAASL,KAAK8E,MAAMzE,QACpBG,UAAWR,KAAKQ,YAEpB9B,EAAAC,EAAAC,cAAC2K,EAAD,CACIxG,WAAY/C,KAAK8E,MAAM/B,WACvBG,QAASlD,KAAK8E,MAAMM,eACpB3C,gBAAiBzC,KAAK8E,MAAMrC,gBAC5BC,eAAgB1C,KAAK0C,eACrBC,aAAc3C,KAAK2C,gBAI3BjE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC3Bf,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,KAAK,QAAQC,MAAM,YACzBR,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CACYwF,OAAK,EACLvK,KAAK,UAELgF,QAASjE,KAAKmF,qBAJ1B,aAQQzG,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CACIwF,OAAK,EACLvK,KAAK,UACLS,UAAU,mBACV+J,UAAWzJ,KAAK8E,MAAMoB,aAAayB,OAAS,EAC5C1D,QAASjE,KAAKqG,mBALlB,0BAUA3H,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CACIwF,OAAK,EACLvK,KAAK,UACLS,UAAU,aACV+J,SAAsC,IAA5BzJ,KAAK8E,MAAMyC,MAAMI,OAC3B1D,QAASjE,KAAKmH,gBALlB,uBAzREtG,aA2Sf+D","file":"static/js/10.0dab6112.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Card, \n        Form, \n        Input, \n        Row, \n        Col, \n        DatePicker\n    } from 'antd';\n// import locale from 'moment/locale/pt-br';\n// import moment from 'moment';\n/**\n * Esse form é responsável por gerenciar os campos da tela de import\n * POrem as actions virão do component pai.\n */\nexport default class ImportOrdersFoxForm extends Component {\n\n    render () {\n        return(\n            <Row>\n                <Col span={24}>\n                    <Card type=\"inner\" title=\"Importação Ordens Fox\">\n                        <Form layout=\"horizontal\" size=\"small\">\n                            <Row>\n                            <Col lg={4} md={6} sm={12} xs={24}>\n                                <div className=\"gx-form-row0\">\n                                    <Form.Item label=\"Data inicial\">\n                                        <DatePicker \n                                            // value={this.state.dataEntrega}\n                                            // locale={locale}\n                                            format={\"DD-MM-YYYY\"} \n                                            onChange={this.props.handleChange('dataInicio')} \n                                        />\n                                    </Form.Item>\n                                </div>\n                            </Col>\n                            <Col lg={4} md={6} sm={12} xs={24}>\n                                <div className=\"gx-form-row0\">\n                                    <Form.Item label=\"Data final\">\n                                        <DatePicker \n                                            // locale={locale}\n                                            // defaultValue={moment()}\n                                            format={\"DD-MM-YYYY\"} \n                                            onChange={this.props.handleChange('dataFim')} \n                                        />\n                                    </Form.Item>\n                                </div>\n                            </Col>\n                            <Col lg={4} md={6} sm={12} xs={24}>\n                                <div className=\"gx-form-row0\">\n                                    <Form.Item label=\"Pedido Venda\">\n                                        <Input \n                                            type=\"text\"\n                                            // style={{ width: 120 }}  \n                                            value={this.props.filtros.pedido}\n                                            name=\"pedido\"\n                                            onChange={this.props.handleChange('pedido')}\n                                            onKeyDown={this.props.onKeyDown}\n                                        />\n                                    </Form.Item>\n                                </div>\n                            </Col>\n                            <Col lg={4} md={6} sm={12} xs={24}>\n                                <div className=\"gx-form-row0\">\n                                    <Form.Item label=\"Pedido Cliente\" >\n                                        <Input \n                                            type=\"text\" \n                                            // style={{ width: 120 }}\n                                            value={this.props.filtros.pedidoCliente}\n                                            name=\"pedidoCliente\"\n                                            onChange={this.props.handleChange('pedidoCliente')}\n                                            onKeyDown={this.props.onKeyDown}\n                                        />\n                                    </Form.Item>\n                                </div>\n                            </Col>\n\n                            <Col lg={4} md={6} sm={12} xs={24}>\n                                <div className=\"gx-form-row0\">\n                                    <Form.Item label=\"Codigo produto\" >\n                                        <Input \n                                            type=\"text\" \n                                            // style={{ width: 120 }}\n                                            // value={orderPro.pedidoCliente}\n                                            value={this.props.filtros.produto}\n                                            name=\"produto\"\n                                            onChange={this.props.handleChange('produto')}\n                                            onKeyDown={this.props.onKeyDown}\n                                        />\n                                    </Form.Item>\n                                </div>\n                            </Col>\n\n                            <Col lg={4} md={6} sm={12} xs={24}>\n                                <div className=\"gx-form-row0\">\n                                    <Form.Item label=\"CFOP\" >\n                                        <Input \n                                            type=\"text\" \n                                            // style={{ width: 120 }}\n                                            // value={orderPro.pedidoCliente}\n                                            name=\"cfop\"\n                                            value={this.props.filtros.cfop}\n                                            onChange={this.props.handleChange('cfop')}\n                                            onKeyDown={this.props.onKeyDown}\n                                        />\n                                    </Form.Item>\n                                </div>\n                            </Col>\n\n                            <Col lg={6} md={6} sm={12} xs={24}>\n                                <div className=\"gx-form-row0\">\n                                    <Form.Item label=\"Cliente\" >\n                                        <Input \n                                            type=\"text\" \n                                            // style={{ width: 120 }}\n                                            // value={orderPro.pedidoCliente}\n                                            value={this.props.filtros.empresa}\n                                            name=\"empresa\"\n                                            onChange={this.props.handleChange('empresa')}\n                                            onKeyDown={this.props.onKeyDown}\n                                        />\n                                    </Form.Item>\n                                </div>\n                            </Col>\n                            </Row>\n                        </Form>\n                    </Card>\n                </Col>\n            </Row>\n        )\n    }\n}\n\n","import React , {Component} from 'react'\nimport { Card, \n    Table,\n    Tag,\n    Spin\n} from 'antd';\nimport moment from 'moment';\n// import api from '../../../util/Api';\n\nconst columns = [\n\n    {\n        title: 'Pedido Venda',\n        dataIndex:'Número',\n        width: 100,\n        key: 'Número',\n        align: 'center',\n        // render: (text) => <text>{text}</text>\n    },\n    {\n        title: 'Pedido Cliente',\n        dataIndex:'Pedido do Cliente',\n        key:'Pedido do Cliente'\n    },\n    {\n        title: 'Emissão',\n        dataIndex:'Emissão',\n        key:'Emissão',\n        render: (text) => moment(text).format('DD-MM-YYYY')\n    },\n    {\n        title: 'Cliente',\n        dataIndex:'Empresa',\n        key:'Empresa'\n    },\n    {\n        title: 'Cnpj/Cpf',\n        dataIndex:'cnpj_cpf',\n        key:'cnpj_cpf'\n    },\n    {\n        title: 'Razao Social',\n        dataIndex:'razao',\n        key:'razao'\n    },\n    {\n        title: 'Código Produto',\n        dataIndex:'Produto',\n        key:'Produto'\n    },\n    {\n        title: 'Descrição',\n        dataIndex:'LINHA01',\n        key:'LINHA01',\n        render:(text,obj) => {\n            return obj.LINHA01 +\" \"+ obj.LINHA02\n        }\n    },\n    {\n        title: 'Quantidade',\n        dataIndex:'qty',\n        key:'qty',\n        align: 'center'\n    },\n    {\n        title: 'CFOP',\n        dataIndex:'cfop',\n        key:'cfop',\n    }\n    ,\n    {\n        title: 'Produto',\n        dataIndex:'isProdutoOk',\n        key:'isProdutoOk',\n        align: 'center',\n        render: (text) => {\n            if (text === 0) {\n                return (<Tag color=\"gold\">Pendente</Tag>)\n            } else {\n                return (<Tag color=\"green\">Ok</Tag>)\n            }\n        }\n    }\n    ,\n    {\n        title: 'Arvore Kit',\n        dataIndex:'isKitOk',\n        key:'isKitOk',\n        align: 'center',\n        render: (text) => {\n            if (text === 1) {\n                return (<Tag color=\"green\">Ok</Tag>)\n            } else {\n                return (<Tag color=\"gold\">Pendente</Tag>)\n            }\n        }\n    },\n    {\n        title: 'Cliente',\n        dataIndex:'isClienteOk',\n        key:'isClienteOk',\n        align: 'center',\n        render: (text,record) => {\n            if(text === 0){\n                return (<Tag color=\"gold\">Pendente</Tag>)\n            }else{\n                return  (<Tag color=\"green\">Ok</Tag>)\n            }\n        }\n    },\n    {\n        title: 'Etapa',\n        dataIndex:'isEtapaOk',\n        key:'isEtapaOk',\n        align: 'center',\n        render: (text,record) => {\n            if(text === 0){\n                return (<Tag color=\"red\">Sem Etapa</Tag>)\n            }else{\n                return  (<Tag color=\"green\">Ok</Tag>)\n            }\n        }\n    },\n    {\n        title: 'Dados basicos',\n        dataIndex:'isDadosBaseOk',\n        key:'isDadosBaseOk',\n        align: 'center',\n        width: 150,\n        render: (text,record) => {\n            if(text === 0){\n                return (<Tag color=\"red\">Falta gerar <br/>dados básicos</Tag>)\n            }else{\n                return  (<Tag color=\"green\">Ok</Tag>)\n            }\n        }\n    },\n    {\n        title: 'OP Gerada',\n        dataIndex:'isOrdemOk',\n        key:'isOrdemOk',\n        align: 'center',\n        render: (text,record) => {\n            if(text === 0){\n                return (<Tag color=\"red\">Sem Ordem</Tag>)\n            }else{\n                return  (<Tag color=\"green\">Ok</Tag>)\n            }\n        }\n    }\n\n]\n\n\n/**\n * Esse componente ira receber uma lista de resultados do fox, e ira apresentar num table.\n * @param resultaData É o array com os dados a serem apresentados\n * @type component\n * @author luiz.garcia\n * @since 30/07/2020 \n */\nexport default class ImportOrdersFoxResults extends Component {\n\n    constructor(props) {\n        super();\n        // this.state = {\n        //     selectedRowKeys: []\n        // }\n        // this.data = [...props.resultData];\n    }\n\n    // onSelectChange = selectedRowKeys => {\n    //     this.setState({selectedRowKeys});\n    // }\n\n    render() {\n        // const { selectedRowKeys } = this.props;\n        return (\n            <Spin spinning={false}>\n                <Card type=\"inner\" title=\"Ordens Filtras a gerar\">\n                    <Table\n                        scroll={{ x: 1500, y: 300 }} \n                        rowSelection={{\n                            selectedRowKeys: this.props.selectedRowKeys,\n                            onChange: this.props.onSelectChange\n                        }} \n                        columns={columns}\n                        onChange={this.props.onChangePage}\n                        sorter={true}\n                        bordered\n                        size=\"small\"\n                        dataSource={this.props.resultData}\n                        style={{margin: '-15px -24px'}}\n                        loading={this.props.loading}\n                        rowKey={Math.random(1,100)}\n                        \n                    />\n                </Card>\n            </Spin>\n        )\n    }\n}","import React from 'react';\nimport {Modal, Card, Timeline, Button} from 'antd';\n\nexport default class Log extends React.Component {\n    render() {\n        return(\n            <Modal\n                title=\"Logs\"\n                visible={this.props.showLog}\n                onOk={this.props.onOkLog}\n                onCancel={this.props.onOkLog}\n                // onCancel={this.props.onCancel}\n                bodyStyle={{padding: 0 }}\n                // confirmLoading={this.props.confirmLoading}\n                footer={[\n                    <Button key=\"submit\" type=\"primary\" onClick={this.props.onOkLog}>\n                      Ok\n                    </Button>\n                ]}\n            >\n                <Card title=\"\" className=\"gx-card\">\n                    <Timeline>\n                        {\n                            this.props.logs.map(function(item) {\n                                var x = item.toString();\n                                return <Timeline.Item color={x.includes('não tem') ? \"red\": \"green\"}>{item}</Timeline.Item>        \n                            })\n                        }\n                        {/* <Timeline.Item color=\"green\">Create a services site 2015-09-01</Timeline.Item>\n                        <Timeline.Item color=\"red\">\n                        <p>Solve initial network problems 1</p>\n                        <p>Solve initial network problems 2</p>\n                        <p>Solve initial network problems 3 2015-09-01</p>\n                        </Timeline.Item>\n                        <Timeline.Item>\n                        <p>Technical testing 1</p>\n                        <p>Technical testing 2</p>\n                        <p>Technical testing 3 2015-09-01</p>\n                        </Timeline.Item> */}\n                    </Timeline>\n                </Card>\n            </Modal>\n        )\n    }\n}","import React, { Component } from 'react';\nimport {Row, Col, Card, Spin, Button, message} from 'antd';\nimport ImportOrdersFoxForm from './ImportOrdersFoxForm';\nimport ImportOrdersFoxResults from './ImportOrdersFoxResults';\nimport api from 'util/Api';\nimport Log from './Log';\n\napi.defaults.timeout = 60000000;\n\nclass ImportOrdersFox extends Component {\n    constructor() {\n        super();\n        this.state = {\n            loading:false,\n            loadingTip: '',\n            canGenerate: false,\n            resultsLoading: false,\n            showLog: false,\n            resultData: [],\n            array: [],\n            array2:[],\n            selectedRowKeys: [],\n            selectedRows: [],\n            filtros: {\n                pedido: '',\n                pedidoCliente: '',\n                cfop:'',\n                produto: '',\n                empresa: '',\n                dataInicio: '',\n                dataFim: '',\n                dataInicioM: '',\n                dataFimM: ''\n            },\n            logs: []\n        };\n\n        //this.setState({logs: this.state.logs.push('Criado produto 1', 'criado produto 2', 'criado produto 3')}); \n        \n        // console.log('Import Ordens Fox....');\n    }\n\n    handleChange = name => value => {\n        let filtros = this.state.filtros;\n\n        if(typeof(value) === \"object\") {\n            if(name === 'dataInicio' || name === 'dataFim') {\n                if(value){\n                    filtros[name] = value.format('YYYY-MM-DD');\n                }\n            }else {\n                filtros[name] = value.target.value;\n            }\n        }else {\n            filtros[name] = value;\n        }\n\n        this.setState({filtros});\n    }\n\n    onChangePage = (page, pageSize) => {\n        //console.log(page, pageSize);\n    }\n\n    onHandleClickSearch = () => {\n        this.setState({resultsLoading: true});\n        let parent = this;\n\n        this.setState({resultData: [], selectedRowKeys: []});\n\n        // console.log(this.state.filtros);\n        \n        api.get(`Fox/`, {\n            params: this.state.filtros\n        })\n        .then( (result) => {\n            \n            parent.setState({\n                resultData: result.data\n            });\n\n            // for (const iterator of result.data) {\n            //     const req = await api({\n            //         method: \"GET\",\n            //         url: `Fox/checkClient`,\n            //         params: iterator.Empresa\n            //     });\n        \n            //     if(req){\n            //         if(req.data === \"pendente\"){\n            //             iterator.isClienteOk = \"pendente\"\n            //         }else{\n            //             iterator.isClienteOk = req.data.name\n            //         }\n            //     }\n            // }\n            message.success('Registros carregados.');\n        },)\n        .catch(function(error) {\n            message.error('Erro ao buscar registro, tente novamente mais tarde!:'+error.message);\n            console.log('error', error)\n        })\n        .then(function () {\n            // always executed\n            parent.setState({resultsLoading: false});\n        });\n    }\n        \n    onSelectChange = (selectedRowKeys,selectedRows) => {\n        // console.log('selectedRowKeys');\n        // console.log(selectedRowKeys, selectedRows);\n        this.setState({selectedRowKeys, selectedRows});\n\n        this.checkIfAllstatusIsOk(selectedRows);\n    }\n\n    /**\n    * Função que é usava para quando usuario apertar ENTER no teclado ele realizar a pesquisar\n    **/\n    onKeyDown =(e) =>{\n        if (e.key === 'Enter') {\n            this.onHandleClickSearch();\n        }\n    }\n\n    onCreateBasicData = async  () => {\n        this.setState({resultsLoading: true});\n        let selectRows = this.state.selectedRows;\n        let parent = this;\n        let METHOD = \"POST\";\n\n        await api({\n            method: METHOD,\n            url: `Fox/createBasicData`,\n            data: {\n                rows: selectRows\n            }\n        }).then(function(result){\n            parent.setState({\n                resultData: [],\n                showLog: true,\n                logs: result.data,\n                resultsLoading: false\n            });\n\n            message.success('Registros Criados Ou Alterados.');\n        })\n        .catch(function(error) {\n            message.error('Erro interno, tente novamente mais tarde!:'+error.message);\n            console.log('error', error)\n        })\n        .then(function(e) {\n            // always executed\n            parent.setState({resultsLoading: false});\n        });\n\n        // if(req){\n            \n        // }else{\n        //     message.error(\"ERRO\");\n        // }\n    }\n\n    onCreateOrders = async () => {\n\n        console.log('onCreateOrders....');\n\n        this.setState({resultsLoading: true});\n        let selectRows = this.state.selectedRows;\n        let parent = this;\n        \n        let METHOD = \"POST\";\n\n        await api({\n            method: METHOD,\n            url: `Fox/createOrders`,\n            data: {\n                rows: selectRows\n            }\n        }).then(function(result){\n\n            parent.setState({\n                resultData: [],\n                showLog: true,\n                logs: result.data !== undefined ? result.data : [],\n                array:[]\n            })\n\n            if(result.data.find(spe => spe.includes('não tem'))){\n                message.error('Kits filhos nao tem Etapas !');\n            }else{\n                message.success('Ordens criadas !');\n            }\n        }).catch(function(error) {\n            message.error('Erro interno, tente novamente mais tarde!:'+error.message);\n            console.log('error', error)\n        })\n        .then(function(e) {\n            // always executed\n            parent.setState({resultsLoading: false});\n        });\n    }\n\n    /**\n     * Para fechar o modal do log\n     */\n    onOkLog = () => {\n        this.setState({\n            showLog: false, \n        });\n    }\n\n    checkIfAllstatusIsOk = (selectedRows) => {\n        let listaDeSelects = selectedRows;\n\n        if(listaDeSelects.length === 0){\n            this.setState({\n                array: []\n            })\n        }else{\n            let array = [];\n            for (const iterator of listaDeSelects) {\n                if(iterator.isProdutoOk === 1 && \n                   iterator.isKitOk === 1 && \n                   iterator.isClienteOk === 1 && \n                   iterator.isEtapaOk === 1 && \n                   iterator.isOrdemOk === 0 &&\n                   iterator.isDadosBaseOk === 1){\n                    array.push(iterator);\n                    this.setState({\n                        array: array\n                    });\n                }\n            }\n            if(array.length === listaDeSelects.length){\n\n            }else{\n                this.setState({\n                    array: []\n                })\n            }\n\n\n        }\n    }\n\n    render() {\n        return(\n            <Spin spinning={this.state.loading} tip={this.state.loadingTip}>\n            <Log \n                showLog={this.state.showLog}\n                onOkLog={this.onOkLog}\n                logs={this.state.logs}\n            />\n            <Row>\n                <Col lg={20} md={20} sm={24} xs={24}>\n                    <ImportOrdersFoxForm \n                        handleChange={this.handleChange} \n                        filtros={this.state.filtros} \n                        onKeyDown={this.onKeyDown}\n                    />\n                    <ImportOrdersFoxResults \n                        resultData={this.state.resultData} \n                        loading={this.state.resultsLoading}\n                        selectedRowKeys={this.state.selectedRowKeys}\n                        onSelectChange={this.onSelectChange}\n                        onChangePage={this.onChangePage}\n                        />\n                </Col>\n\n                <Col lg={4} md={4} sm={24} xs={24}>\n                    <Card type=\"inner\" title=\"Açoes\">\n                    <Button \n                                block\n                                type=\"primary\"\n                                // disabled={!this.state.canNew}\n                                onClick={this.onHandleClickSearch}\n                            >\n                                Pesquisar\n                            </Button>\n                            <Button \n                                block\n                                type=\"primary\"\n                                className=\"gx-btn-secondary\"\n                                disabled={!this.state.selectedRows.length > 0}\n                                onClick={this.onCreateBasicData}\n                            >\n                                Gerar Dados Básicos\n                            </Button>\n\n                            <Button \n                                block\n                                type=\"primary\"\n                                className=\"gx-btn-red\"\n                                disabled={this.state.array.length === 0  ? true: false}\n                                onClick={this.onCreateOrders}\n                            >\n                                Gerar OP\n                            </Button>\n\n                    </Card>\n                </Col>\n            </Row>\n            </Spin>\n        )\n    }\n}\n\nexport default ImportOrdersFox;"],"sourceRoot":""}
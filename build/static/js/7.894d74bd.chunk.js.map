{"version":3,"sources":["routes/administrator/CadDashboards/ListDashboards.js","routes/administrator/CadDashboards/expert.js","routes/administrator/CadDashboards/index.js"],"names":["columns","title","dataIndex","key","render","text","model","ListTaxaHora","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchLeftList","api","get","concat","then","result","setState","data","catch","error","console","log","state","_this2","react_default","a","createElement","LeftList","onRowClick","record","rowIndex","onClick","event","onClickRow","Component","_","require","Option","Select","CadDashboardsexpert","getMaquinas","dataMaq","taxMaquinas","filter","o","type","listofMaquinas","onHandleClickNew","setStateNew","handleOnClickRow1","parent","assertThisInitialized","loading","loadingTip","setTimeout","id","message","success","setStateEdit","onHandleClickSave","user","listaDeMaquinasSelected","tableList","METHOD","URL","isNew","cod","desc","method","url","leftListChild","current","onCancel","history","replace","document","location","reload","onHandleClickDelete","Modal","confirm","onOk","canSave","canNew","canDelete","jsonMaquinaAdd","machines","handleChange","newUser","target","name","value","ListDashboards","ref","handleMaquina","auxList","obj","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","handleAdd","lista","last","length","objlista","push","Content","className","row","col","span","es_form","layout","size","card","lg","md","sm","xs","Item","label","input","disabled","onChange","table","dataSource","rowKey","style","margin","es_select","width","showSearch","filterOption","inputValue","option","children","toUpperCase","indexOf","map","e","es_button","htmlType","loader","auxthis","marginRight","handleDeleteAddressRow","bind","React","createRef","preventDefault","list","item","spin","spinning","tip","block","CadDashboards","expert"],"mappings":"wTAIMA,EAAU,CACZ,CACIC,MAAO,SACPC,UAAU,MACVC,IAAK,MACLC,OAAQ,SAAAC,GACJ,OAAOA,IAIf,CACIJ,MAAO,kBACPC,UAAU,OACVC,IAAK,SAMPG,EAAQ,aAkDCC,cA/CX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAeJI,cAAgB,WAEZC,IAAIC,IAAJ,GAAAC,OAAWb,EAAX,KAAqB,IACpBc,KAAK,SAACC,GACHZ,EAAKa,SAAS,CACVC,KAAMF,EAAOE,KAAKA,SAGzBC,MAAM,SAASC,GACZC,QAAQC,IAAI,QAASF,MAnBzBhB,EAAKmB,MAAQ,CACTL,KAAM,IAPKd,mFAafG,KAAKI,iDAiBA,IAAAa,EAAAjB,KACL,OACAkB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIjC,QAASA,EACTuB,KAAMX,KAAKgB,MAAML,KACjBW,WAAY,SAACC,EAAQC,GACjB,MAAO,CACHC,QAAU,SAAAC,GAAK,OAAIT,EAAKrB,MAAM+B,WAAWJ,EAAQC,gBAvC9CI,aCNvBC,WAAIC,EAAQ,MACRC,EAAWC,IAAXD,OACFrC,EAAQ,aA2cCuC,cAxcb,SAAAA,IAAc,IAAApC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IACZpC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,QAoEFkC,YAAc,WACZ7B,IACGC,IADH,0BACkC,IAC/BE,KAAK,SAACC,GACL,IAAI0B,EACJA,EAAU1B,EAAOE,KAEjB,IAAIyB,EAAcP,EAAEQ,OAAOF,EAAS,SAACG,GACnC,MAAkB,YAAXA,EAAEC,MAAsB,aAEjC1C,EAAKa,SAAS,CACZ8B,eAAgBJ,MAGnBxB,MAAM,SAAUC,GACfC,QAAQC,IAAIF,MApFJhB,EAwFd4C,iBAAmB,WACjB5C,EAAK6C,eAzFO7C,EAoGd8C,kBAAoB,SAACpB,EAAQC,GAC3B,IAAIoB,EAAM9C,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,IAEVA,EAAKa,SAAS,CACZoC,SAAS,EACTC,WAAY,oCAIdC,WAAW,WAET3C,IACGC,IADH,GAAAC,OACUb,EADV,KAAAa,OACmBgB,EAAO0B,IAAM,IAC7BzC,KAAK,SAACC,GAILyC,IAAQC,QAAQ,oCAChBP,EAAOQ,aAAa3C,EAAOE,QAE5BC,MAAM,SAAUC,GAEfqC,IAAQrC,MAAM,wDACd+B,EAAOF,iBAEV,MA7HS7C,EAgIdwD,kBAAoB,WAElB,IAAI9B,EAAS1B,EAAKmB,MAAMsC,KACpBV,EAAM9C,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,IAEN0D,EAA0B1D,EAAKmB,MAAMwC,UAEzC3D,EAAKa,SAAS,CACZoC,SAAS,EACTC,WAAY,kCAGd,IAAIU,EAAS,QACTC,EAAG,GAAAnD,OAAMb,EAAN,KAAAa,OAAegB,EAAO0B,IAEzBL,EAAO5B,MAAM2C,QACfF,EAAS,OACTC,EAAG,GAAAnD,OAAMb,IAjBa,IAqBhBkE,EAAcrC,EAAdqC,IAAKC,EAAStC,EAATsC,KACbxD,YAAI,CACFyD,OAAQL,EACRM,IAAKL,EACL/C,KAAM,CACJiD,IAAKA,EACLC,KAAMA,EACNrB,eAAgBe,KAGjB/C,KAAK,SAACC,GAELyC,IAAQC,QAAQ,gCAEhBP,EAAOQ,aAAa3C,EAAOE,MAC3BiC,EAAOoB,cAAcC,QAAQ7D,kBAE9BQ,MAAM,SAAUC,GAEf+B,EAAOQ,aAAa7B,GACpB2B,IAAQrC,MAAM,2DAzKNhB,EA6KdqE,SAAW,WACTC,IAAQC,QAAQ,cAChBC,SAASC,SAASC,QAAO,IA/Kb1E,EAkLd2E,oBAAsB,WAEpB,IAAIjD,EAAS1B,EAAKmB,MAAMsC,KACpBV,EAAM9C,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,IAEV4E,IAAMC,QAAQ,CACZrF,MAAO,gDACPsF,KAFY,WAGV/B,EAAOlC,SAAS,CACdoC,SAAS,EACTC,WAAY,mCAEdC,WAAW,WAET,IACIU,EAAG,GAAAnD,OAAMb,EAAN,KAAAa,OAAegB,EAAO0B,IAC7B5C,YAAI,CACFyD,OAHW,SAIXC,IAAKL,IAEJlD,KAAK,SAACC,GAELyC,IAAQC,QAAQ,kCAChBP,EAAOF,cACPE,EAAOoB,cAAcC,QAAQ7D,kBAE9BQ,MAAM,SAAUC,GAEfqC,IAAQrC,MACN,4DAGL,KACH+B,EAAOF,eAETwB,SA9BY,gBAvLFrE,EA2Nd6C,YAAc,WACZ7C,EAAKa,SAAS,CACZkE,SAAS,EACTC,QAAQ,EACRC,WAAW,EACXxB,KAAM,GACNR,SAAS,EACTa,OAAO,EACPH,UAAW,GACXuB,eAAgB,CACd9B,GAAI,OArOIpD,EA2OduD,aAAe,SAAC1D,GACdG,EAAKa,SAAS,CACZkE,SAAS,EACTC,QAAQ,EACRC,WAAW,EACXxB,KAAM5D,EACNoD,SAAS,EACTa,OAAO,EACPH,UAAW9D,EAAMsF,SACjBD,eAAgB,CACd9B,GAAI,OArPIpD,EA0PdoF,aAAe,SAACvD,GACd,IAAIwD,EAAUrF,EAAKmB,MAAMsC,KACzB4B,EAAQxD,EAAMyD,OAAOC,MAAQ1D,EAAMyD,OAAOE,MAE1CxF,EAAKa,SAAS,iBAAO,CACnB4C,KAAM4B,MA/PIrF,EAmQdwB,SAAW,WACT,OACEH,EAAAC,EAAAC,cAACkE,EAAD,CACE3D,WAAY9B,EAAK8C,kBACjB4C,IAAK1F,EAAKmE,iBAvQFnE,EA4Qd2F,cAAgB,SAAC9D,GACf,IAAI+D,EAAU5F,EAAKmB,MAAMwB,eACrBkD,EAAM,GAFeC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAIzB,QAAAC,EAAAC,EAAuBP,EAAvBQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAgC,KAArBO,EAAqBH,EAAAV,MAC1B3D,IAAUwE,EAASjD,KACrByC,EAAMQ,IANe,MAAAG,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAK,EAAAM,QAAAN,EAAAM,SAAA,WAAAV,EAAA,MAAAC,GAUzBhG,EAAKa,SAAS,CACZqE,eAAgBW,KAvRN7F,EA2Rd0G,UAAY,WACV,IAAIC,EAAQ3G,EAAKmB,MAAMwC,UACnBkC,EAAM7F,EAAKmB,MAAM+D,eACjB0B,EAAOD,EAAMA,EAAME,OAAS,GAE5BC,EAAWjB,EACM,IAAjBc,EAAME,OACRC,EAAQ,IAAU,EAElBA,EAAQ,IAAUF,EAAKlH,IAAM,EAG/BiH,EAAMI,KAAKD,GACX9G,EAAKa,SAAS,CACZ8C,UAAWgD,IAEbtD,IAAQC,QAAQ,yBA3SJtD,EA8SdgH,QAAU,SAACvD,GACT,OACEpC,EAAAC,EAAAC,cAAA,OAAK0F,UAAU,QACb5F,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,KACE7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAKC,KAAM,IACT/F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,CAAMC,OAAO,aAAaC,KAAK,SAC7BlG,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAM9E,KAAK,QAAQlD,MAAM,0BACvB6B,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,KACE7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAKM,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC7BvG,EAAAC,EAAAC,cAAA,OAAK0F,UAAU,gBACb5F,EAAAC,EAAAC,cAAC8F,EAAA,EAAKQ,KAAN,CAAWC,MAAM,aACfzG,EAAAC,EAAAC,cAACwG,EAAA,EAAD,CACErF,KAAK,OACL8C,MAAO/B,EAAKM,IACZwB,KAAK,MACLyC,UAAUhI,EAAKmB,MAAM2C,MACrBmE,SAAUjI,EAAKoF,kBAMvB/D,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAKM,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC7BvG,EAAAC,EAAAC,cAAA,OAAK0F,UAAU,gBACb5F,EAAAC,EAAAC,cAAC8F,EAAA,EAAKQ,KAAN,CAAWC,MAAM,mBACfzG,EAAAC,EAAAC,cAACwG,EAAA,EAAD,CACErF,KAAK,OACL8C,MAAO/B,EAAKO,KACZuB,KAAK,OACL0C,SAAUjI,EAAKoF,oBAQ3B/D,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAM9E,KAAK,QAAQlD,MAAM,YACvB6B,EAAAC,EAAAC,cAAC2G,EAAA,EAAD,CACEjB,UAAU,sBACVkB,WAAYnI,EAAKmB,MAAMwC,UACvB4D,KAAK,QACLa,OAAO,KACPC,MAAO,CAAEC,OAAQ,eACjB/I,QAASS,EAAKT,WAIlB8B,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAM9E,KAAK,QAAQlD,MAAM,sBACvB6B,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,KACE7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAKM,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC7BvG,EAAAC,EAAAC,cAAA,OAAK0F,UAAU,gBACb5F,EAAAC,EAAAC,cAAC8F,EAAA,EAAKQ,KAAN,CAAWC,MAAM,YACfzG,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CACEF,MAAO,CAAEG,MAAO,KAChBC,YAAU,EACVjD,MAAOxF,EAAKmB,MAAM+D,eAAe9B,GACjC6E,SAAUjI,EAAK2F,cACf+C,aAAc,SAACC,EAAYC,GAAb,OAQ8B,IAN1CA,EAAO7I,MAAM8I,SAAS,GACnBnI,OACCkI,EAAO7I,MAAM8I,SAAS,GACtBD,EAAO7I,MAAM8I,SAAS,IAEvBC,cACAC,QAAQJ,EAAWG,iBAGvB9I,EAAKmB,MAAMwB,eAAeqG,IAAI,SAACC,GAC9B,OACE5H,EAAAC,EAAAC,cAACW,EAAD,CAAQsD,MAAOyD,EAAE7F,IACd6F,EAAElF,IADL,IACWkF,EAAE1D,aAS3BlE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,KACE7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAKM,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC7BvG,EAAAC,EAAAC,cAAA,OAAK0F,UAAU,gBACb5F,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CACExG,KAAK,UACLyG,SAAS,SACTnB,UAAU,EACVpG,QAAS5B,EAAK0G,WAJhB,8BAlYlB1G,EAAKmB,MAAQ,CACX2C,OAAO,EACPsF,QAAQ,EACR3F,KAAM,GACNuB,QAAQ,EACRD,SAAS,EACTE,WAAW,EACXhC,SAAS,EACTN,eAAgB,GAChBgB,UAAW,GACXuB,eAAgB,CACd9B,GAAI,KAGR,IAAIiG,EAAOpJ,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,IAhBC,OAiBZA,EAAKT,QAAU,CACb,CACEC,MAAO,SACPC,UAAW,OAEb,CACED,MAAO,OACPC,UAAW,QAEb,CACED,MAAO,YACPC,UAAW,YAEb,CACED,MAAO,cACPE,IAAK,SACLC,OAAQ,SAACC,EAAM8B,GAAP,OACNL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KACE0F,UAAU,kBACVoB,MAAO,CAAEiB,YAAa,QACtB1H,QAAS,SAACqH,GACRrE,IAAMC,QAAQ,CACZrF,MAAO,+CACPsF,KAFY,WAGVuE,EAAQE,uBAAuB7H,EAAO0B,GAAI6F,GAC1C5F,IAAQC,QAAQ,qBAElBe,SANY,sBAe1BrE,EAAKoF,aAAepF,EAAKoF,aAAaoE,KAAlBvJ,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,KACpBA,EAAK6C,YAAc7C,EAAK6C,YAAY2G,KAAjBvJ,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,KACnBA,EAAKwD,kBAAoBxD,EAAKwD,kBAAkBgG,KAAvBvJ,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,KAEzBA,EAAK2E,oBAAsB3E,EAAK2E,oBAAoB6E,KAAzBvJ,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,KAC3BA,EAAK4C,iBAAmB5C,EAAK4C,iBAAiB4G,KAAtBvJ,OAAA+C,EAAA,EAAA/C,QAAA+C,EAAA,EAAA/C,CAAAD,KAGxBA,EAAKmE,cAAgBsF,IAAMC,YA9Df1J,oFAkEZG,KAAKkC,6DA0BgB3C,EAAKuJ,GAC1BA,EAAEU,iBACF,IAAMC,EAAOzJ,KAAKgB,MAAMwC,UAAUnB,OAAO,SAACqH,GAAD,OAAUA,EAAKzG,KAAO1D,IAC/DS,KAAKU,SAAS,CACZ8C,UAAWiG,qCAwTb,OACEvI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CAAMC,SAAU5J,KAAKgB,MAAM8B,QAAS+G,IAAK7J,KAAKgB,MAAM+B,YAClD7B,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,KACE7F,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAKM,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC5BzH,KAAKqB,YAGRH,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAKM,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC9BzH,KAAK6G,QAAQ7G,KAAKgB,MAAMsC,OAG3BpC,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAKM,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC7BvG,EAAAC,EAAAC,cAACiG,EAAA,EAAD,CAAM9E,KAAK,QAAQlD,MAAM,cACvB6B,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CACEe,OAAK,EACLvH,KAAK,UACLuE,UAAU,mBACVe,UAAW7H,KAAKgB,MAAM6D,OACtBpD,QAASzB,KAAKyC,kBALhB,QASAvB,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CACEe,OAAK,EACLvH,KAAK,UACLd,QAASzB,KAAKqD,kBACdwE,UAAW7H,KAAKgB,MAAM4D,SAJxB,UAQA1D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CACEe,OAAK,EACLjC,UAAW7H,KAAKgB,MAAM8D,UACtBvC,KAAK,UACLd,QAASzB,KAAKwE,oBACdsC,UAAU,cALZ,sBAxboBlF,aCXnBmI,UANO,WAClB,OACI7I,EAAAC,EAAAC,cAAC4I,EAAD","file":"static/js/7.894d74bd.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport api from '../../../util/Api';\r\nimport LeftList from '../../../components/LeftList';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Codigo',\r\n        dataIndex:'cod',\r\n        key: 'cod',\r\n        render: text => {\r\n            return text\r\n        },\r\n        //sorter: (a, b) => a.cod.length - b.cod.length,\r\n    },\r\n    {\r\n        title: 'Descrição',\r\n        dataIndex:'desc',\r\n        key: 'desc',\r\n        //sorter: (a, b) => a.valor - b.valor\r\n        \r\n    }\r\n]\r\n\r\nconst model = 'dashboards';\r\n\r\nclass ListTaxaHora extends Component {\r\n    constructor(props) {\r\n        super()\r\n        // console.log('ListUSers - Constructor')\r\n        // console.log(props)\r\n\r\n        \r\n        this.state = {\r\n            data: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // console.log('ComponentDidMout - CustomerList');\r\n        this.fetchLeftList();\r\n    } \r\n\r\n    fetchLeftList = () => {\r\n        // console.log('fecthLeftlist');\r\n        api.get(`${model}/`, {})\r\n        .then((result) => {\r\n            this.setState({\r\n                data: result.data.data\r\n            });\r\n        },)\r\n        .catch(function(error) {\r\n            console.log('error', error)\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <LeftList \r\n                columns={columns} \r\n                data={this.state.data} \r\n                onRowClick={(record, rowIndex) => {\r\n                    return {\r\n                        onClick : event => this.props.onClickRow(record, rowIndex)\r\n                    }\r\n                }}\r\n            />\r\n       </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default ListTaxaHora;","import React, { Component } from 'react';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Form,\r\n  Input,\r\n  Button,\r\n  message,\r\n  Modal,\r\n  Spin,\r\n  Table,\r\n  Select,\r\n} from 'antd';\r\nimport history from '../../../util/history';\r\nimport ListTaxaHora from './ListDashboards';\r\nimport api from '../../../util/Api';\r\nimport '../Users/maktorTemplate.less';\r\n\r\nvar _ = require('lodash');\r\nconst { Option } = Select;\r\nconst model = 'Dashboards';\r\n\r\nclass CadDashboardsexpert extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isNew: true,\r\n      loader: true,\r\n      user: {},\r\n      canNew: true,\r\n      canSave: true,\r\n      canDelete: false,\r\n      loading: false,\r\n      listofMaquinas: [],\r\n      tableList: [],\r\n      jsonMaquinaAdd: {\r\n        id: '',\r\n      },\r\n    };\r\n    let auxthis = this;\r\n    this.columns = [\r\n      {\r\n        title: 'Codigo',\r\n        dataIndex: 'cod',\r\n      },\r\n      {\r\n        title: 'Nome',\r\n        dataIndex: 'name',\r\n      },\r\n      {\r\n        title: 'Taxa Hora',\r\n        dataIndex: 'ratetime',\r\n      },\r\n      {\r\n        title: 'Ações',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n          <div>\r\n            <i\r\n              className=\"icon icon-trash\"\r\n              style={{ marginRight: '10px' }}\r\n              onClick={(e) => {\r\n                Modal.confirm({\r\n                  title: 'Tem certeza que deseja remover esta maquina?',\r\n                  onOk() {\r\n                    auxthis.handleDeleteAddressRow(record.id, e);\r\n                    message.success('Maquina removida');\r\n                  },\r\n                  onCancel() {},\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        ),\r\n      },\r\n    ];\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.setStateNew = this.setStateNew.bind(this);\r\n    this.onHandleClickSave = this.onHandleClickSave.bind(this);\r\n\r\n    this.onHandleClickDelete = this.onHandleClickDelete.bind(this);\r\n    this.onHandleClickNew = this.onHandleClickNew.bind(this);\r\n    // this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    this.leftListChild = React.createRef();\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.getMaquinas();\r\n  }\r\n\r\n  getMaquinas = () => {\r\n    api\r\n      .get(`MachineLabor/?limit=999`, {})\r\n      .then((result) => {\r\n        let dataMaq = [];\r\n        dataMaq = result.data;\r\n\r\n        let taxMaquinas = _.filter(dataMaq, (o) => {\r\n          return o.type === 'maquina' || 'montagem';\r\n        });\r\n        this.setState({\r\n          listofMaquinas: taxMaquinas,\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  onHandleClickNew = () => {\r\n    this.setStateNew();\r\n  };\r\n\r\n  handleDeleteAddressRow(key, e) {\r\n    e.preventDefault();\r\n    const list = this.state.tableList.filter((item) => item.id !== key);\r\n    this.setState({\r\n      tableList: list,\r\n    });\r\n  }\r\n\r\n  handleOnClickRow1 = (record, rowIndex) => {\r\n    var parent = this;\r\n    //Primeria coisa ele seta loading para true\r\n    this.setState({\r\n      loading: true,\r\n      loadingTip: 'Carregando registro, aguarde...',\r\n    });\r\n\r\n    //Coloquei esse timeout de 1 segundo para simular o carregamento\r\n    setTimeout(function () {\r\n      //Agora ele vai buscar o registro no servidor\r\n      api\r\n        .get(`${model}/${record.id}`, {})\r\n        .then((result) => {\r\n          //Caso consiga recuperar o model, ele atualiza a tela e para de carregar\r\n          // console.log(result.data.adresses);\r\n          // console.log(result.adresses);\r\n          message.success('Dashboard carregada com sucesso!');\r\n          parent.setStateEdit(result.data);\r\n        })\r\n        .catch(function (error) {\r\n          // console.log(error);\r\n          message.error('Erro ao buscar registro, tente novamente mais tarde!');\r\n          parent.setStateNew();\r\n        });\r\n    }, 1000);\r\n  };\r\n\r\n  onHandleClickSave = () => {\r\n    // console.log(this.state.model);\r\n    let record = this.state.user;\r\n    var parent = this;\r\n\r\n    let listaDeMaquinasSelected = this.state.tableList;\r\n\r\n    this.setState({\r\n      loading: true,\r\n      loadingTip: 'Salvando registro, aguarde...',\r\n    });\r\n    //Verifica se é uma atualizacao (PUT) ou novo registro (POST)\r\n    let METHOD = 'PATCH';\r\n    let URL = `${model}/${record.id}`;\r\n\r\n    if (parent.state.isNew) {\r\n      METHOD = 'POST';\r\n      URL = `${model}`;\r\n      // record = Object.assign({},record)\r\n    }\r\n    // console.log('onHandleSaveButton', record);\r\n    const { cod, desc } = record;\r\n    api({\r\n      method: METHOD,\r\n      url: URL,\r\n      data: {\r\n        cod: cod,\r\n        desc: desc,\r\n        listofMaquinas: listaDeMaquinasSelected,\r\n      },\r\n    })\r\n      .then((result) => {\r\n        //Caso consiga recuperar o model, ele atualiza a tela e para de carregar\r\n        message.success('Dashboard salvo com sucesso!');\r\n        // console.log(result.data);\r\n        parent.setStateEdit(result.data);\r\n        parent.leftListChild.current.fetchLeftList();\r\n      })\r\n      .catch(function (error) {\r\n        // console.log(error);\r\n        parent.setStateEdit(record);\r\n        message.error('Erro ao gravar registro, tente novamente mais tarde!');\r\n      });\r\n  };\r\n\r\n  onCancel = () => {\r\n    history.replace('/dashboard');\r\n    document.location.reload(true);\r\n  };\r\n\r\n  onHandleClickDelete = () => {\r\n    // console.log(this.state.model);\r\n    let record = this.state.user;\r\n    var parent = this;\r\n\r\n    Modal.confirm({\r\n      title: 'Tem certeza que deseja excluir esse registro?',\r\n      onOk() {\r\n        parent.setState({\r\n          loading: true,\r\n          loadingTip: 'Excluindo registro, aguarde...',\r\n        });\r\n        setTimeout(function () {\r\n          //Agora ele vai buscar o registro no servidor\r\n          let METHOD = 'DELETE';\r\n          let URL = `${model}/${record.id}`;\r\n          api({\r\n            method: METHOD,\r\n            url: URL,\r\n          })\r\n            .then((result) => {\r\n              //Caso consiga recuperar o model, ele atualiza a tela e para de carregar\r\n              message.success('Registro excluido com sucesso!');\r\n              parent.setStateNew();\r\n              parent.leftListChild.current.fetchLeftList();\r\n            })\r\n            .catch(function (error) {\r\n              // console.log(error);\r\n              message.error(\r\n                'Erro ao excluir registro, tente novamente mais tarde!'\r\n              );\r\n            });\r\n        }, 1000);\r\n        parent.setStateNew();\r\n      },\r\n      onCancel() {\r\n        //Nada acontece\r\n      },\r\n    });\r\n  };\r\n\r\n  setStateNew = () => {\r\n    this.setState({\r\n      canSave: true,\r\n      canNew: true,\r\n      canDelete: false,\r\n      user: {},\r\n      loading: false,\r\n      isNew: true,\r\n      tableList: [],\r\n      jsonMaquinaAdd: {\r\n        id: '',\r\n      },\r\n    });\r\n  };\r\n\r\n  //Seta o estado para edição\r\n  setStateEdit = (model) => {\r\n    this.setState({\r\n      canSave: true,\r\n      canNew: true,\r\n      canDelete: true,\r\n      user: model,\r\n      loading: false,\r\n      isNew: false,\r\n      tableList: model.machines,\r\n      jsonMaquinaAdd: {\r\n        id: '',\r\n      },\r\n    });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    let newUser = this.state.user;\r\n    newUser[event.target.name] = event.target.value;\r\n\r\n    this.setState(() => ({\r\n      user: newUser,\r\n    }));\r\n  };\r\n\r\n  LeftList = () => {\r\n    return (\r\n      <ListTaxaHora\r\n        onClickRow={this.handleOnClickRow1}\r\n        ref={this.leftListChild}\r\n      />\r\n    );\r\n  };\r\n\r\n  handleMaquina = (event) => {\r\n    let auxList = this.state.listofMaquinas;\r\n    let obj = {};\r\n\r\n    for (const iterator of auxList) {\r\n      if (event === iterator.id) {\r\n        obj = iterator;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      jsonMaquinaAdd: obj,\r\n    });\r\n  };\r\n\r\n  handleAdd = () => {\r\n    let lista = this.state.tableList;\r\n    let obj = this.state.jsonMaquinaAdd;\r\n    let last = lista[lista.length - 1];\r\n\r\n    let objlista = obj;\r\n    if (lista.length === 0) {\r\n      objlista['key'] = 0;\r\n    } else {\r\n      objlista['key'] = last.key + 1;\r\n    }\r\n\r\n    lista.push(objlista);\r\n    this.setState({\r\n      tableList: lista,\r\n    });\r\n    message.success('Maquina adicionada !');\r\n  };\r\n\r\n  Content = (user) => {\r\n    return (\r\n      <div className=\"main\">\r\n        <Row>\r\n          <Col span={24}>\r\n            <Form layout=\"horizontal\" size=\"small\">\r\n              <Card type=\"inner\" title=\"Cadastro de Dashboards\">\r\n                <Row>\r\n                  <Col lg={6} md={8} sm={12} xs={24}>\r\n                    <div className=\"gx-form-row0\">\r\n                      <Form.Item label=\"Código\">\r\n                        <Input\r\n                          type=\"text\"\r\n                          value={user.cod}\r\n                          name=\"cod\"\r\n                          disabled={this.state.isNew ? false : true}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                      </Form.Item>\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col lg={6} md={8} sm={12} xs={24}>\r\n                    <div className=\"gx-form-row0\">\r\n                      <Form.Item label=\"Descrição\">\r\n                        <Input\r\n                          type=\"text\"\r\n                          value={user.desc}\r\n                          name=\"desc\"\r\n                          onChange={this.handleChange}\r\n                        />\r\n                      </Form.Item>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </Card>\r\n\r\n              <Card type=\"inner\" title=\"Maquinas\">\r\n                <Table\r\n                  className=\"gx-table-responsive\"\r\n                  dataSource={this.state.tableList}\r\n                  size=\"small\"\r\n                  rowKey=\"id\"\r\n                  style={{ margin: '-15px -24px' }}\r\n                  columns={this.columns}\r\n                />\r\n              </Card>\r\n\r\n              <Card type=\"inner\" title=\"Adicionar Maquinas\">\r\n                <Row>\r\n                  <Col lg={6} md={6} sm={12} xs={24}>\r\n                    <div className=\"gx-form-row0\">\r\n                      <Form.Item label=\"Maquinas\">\r\n                        <Select\r\n                          style={{ width: 400 }}\r\n                          showSearch\r\n                          value={this.state.jsonMaquinaAdd.id}\r\n                          onChange={this.handleMaquina}\r\n                          filterOption={(inputValue, option) =>\r\n                            // console.log(inputValue)\r\n                            option.props.children[0]\r\n                              .concat(\r\n                                option.props.children[1],\r\n                                option.props.children[2]\r\n                              )\r\n                              .toUpperCase()\r\n                              .indexOf(inputValue.toUpperCase()) !== -1\r\n                          }\r\n                        >\r\n                          {this.state.listofMaquinas.map((e) => {\r\n                            return (\r\n                              <Option value={e.id}>\r\n                                {e.cod}-{e.name}\r\n                              </Option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                      </Form.Item>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <br />\r\n                <br />\r\n                <Row>\r\n                  <Col lg={6} md={6} sm={12} xs={24}>\r\n                    <div className=\"gx-form-row0\">\r\n                      <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        disabled={false}\r\n                        onClick={this.handleAdd}\r\n                      >\r\n                        Adicionar Maquina\r\n                      </Button>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </Card>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Spin spinning={this.state.loading} tip={this.state.loadingTip}>\r\n        <Row>\r\n          <Col lg={5} md={5} sm={24} xs={24}>\r\n            {this.LeftList()}\r\n          </Col>\r\n\r\n          <Col lg={15} md={15} sm={24} xs={24}>\r\n            {this.Content(this.state.user)}\r\n          </Col>\r\n\r\n          <Col lg={4} md={4} sm={24} xs={24}>\r\n            <Card type=\"inner\" title=\"Dashboards\">\r\n              <Button\r\n                block\r\n                type=\"primary\"\r\n                className=\"gx-btn-secondary\"\r\n                disabled={!this.state.canNew}\r\n                onClick={this.onHandleClickNew}\r\n              >\r\n                Novo\r\n              </Button>\r\n              <Button\r\n                block\r\n                type=\"primary\"\r\n                onClick={this.onHandleClickSave}\r\n                disabled={!this.state.canSave}\r\n              >\r\n                Salvar\r\n              </Button>\r\n              <br />\r\n              <Button\r\n                block\r\n                disabled={!this.state.canDelete}\r\n                type=\"primary\"\r\n                onClick={this.onHandleClickDelete}\r\n                className=\"gx-btn-red\"\r\n              >\r\n                Excluir\r\n              </Button>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Spin>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CadDashboardsexpert;\r\n","import React from 'react'\r\nimport UsersExpert from './expert'\r\n\r\n// const TabPane = Tabs.TabPane\r\n\r\n\r\nconst CadDashboards = () => {\r\n    return (\r\n        <UsersExpert />\r\n    )\r\n};\r\n\r\nexport default CadDashboards;"],"sourceRoot":""}
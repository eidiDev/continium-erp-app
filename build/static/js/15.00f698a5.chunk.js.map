{"version":3,"sources":["routes/administrator/ImportOrdersFox/ImportOrdersFoxForm.js","routes/administrator/ImportOrdersFox/ImportOrdersFoxResults.js","routes/administrator/ImportOrdersFox/Log.js","routes/administrator/ImportOrdersFox/index.js"],"names":["ImportOrdersFoxForm","react_default","a","createElement","row","col","span","card","type","title","es_form","layout","size","lg","md","sm","xs","className","Item","label","date_picker","format","onChange","this","props","handleChange","input","value","filtros","pedido","name","onKeyDown","pedidoCliente","produto","cfop","empresa","Component","columns","dataIndex","width","key","align","render","text","moment","onCell","style","whiteSpace","maxWidth","obj","EllipsisTooltip","LINHA01","LINHA02","tag","color","record","ImportOrdersFoxResults","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","spin","spinning","table","scroll","x","y","rowSelection","selectedRowKeys","onSelectChange","fixed","onChangePage","sorter","bordered","dataSource","resultData","margin","loading","rowKey","Log","modal","visible","showLog","onOk","onOkLog","onCancel","bodyStyle","padding","footer","es_button","onClick","timeline","logs","map","item","toString","includes","React","api","defaults","timeout","apiAdonis","ImportOrdersFox","_this","state","target","setState","page","pageSize","console","log","onHandleClickSearch","resultsLoading","parent","assertThisInitialized","get","params","then","result","data","filter","op","isOrdemOk","message","success","catch","error","selectedRows","checkIfAllstatusIsOk","e","onCreateBasicData","asyncToGenerator","regenerator_default","mark","_callee","selectRows","wrap","_context","prev","next","method","url","rows","stop","onCreateOrders","_callee2","_context2","post","sent","undefined","array","find","spe","t0","listaDeSelects","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","isProdutoOk","isKitOk","isClienteOk","isEtapaOk","isDadosBaseOk","push","err","return","loadingTip","canGenerate","array2","dataInicio","dataFim","dataInicioM","dataFimM","tip","Log_Log","ImportOrdersFoxForm_ImportOrdersFoxForm","ImportOrdersFoxResults_ImportOrdersFoxResults","block","disabled"],"mappings":"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","file":"static/js/15.00f698a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Card, \r\n        Form, \r\n        Input, \r\n        Row, \r\n        Col, \r\n        DatePicker\r\n    } from 'antd';\r\n// import locale from 'moment/locale/pt-br';\r\n// import moment from 'moment';\r\n/**\r\n * Esse form é responsável por gerenciar os campos da tela de import\r\n * POrem as actions virão do component pai.\r\n */\r\nexport default class ImportOrdersFoxForm extends Component {\r\n\r\n    render () {\r\n        return(\r\n            <Row>\r\n                <Col span={24}>\r\n                    <Card type=\"inner\" title=\"Importação Ordens Fox\">\r\n                        <Form layout=\"horizontal\" size=\"small\">\r\n                            <Row>\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Data inicial\">\r\n                                        <DatePicker \r\n                                            // value={this.state.dataEntrega}\r\n                                            // locale={locale}\r\n                                            format={\"DD-MM-YYYY\"} \r\n                                            onChange={this.props.handleChange('dataInicio')} \r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Data final\">\r\n                                        <DatePicker \r\n                                            // locale={locale}\r\n                                            // defaultValue={moment()}\r\n                                            format={\"DD-MM-YYYY\"} \r\n                                            onChange={this.props.handleChange('dataFim')} \r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Pedido Venda\">\r\n                                        <Input \r\n                                            type=\"text\"\r\n                                            // style={{ width: 120 }}  \r\n                                            value={this.props.filtros.pedido}\r\n                                            name=\"pedido\"\r\n                                            onChange={this.props.handleChange('pedido')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Pedido Cliente\" >\r\n                                        <Input \r\n                                            type=\"text\" \r\n                                            // style={{ width: 120 }}\r\n                                            value={this.props.filtros.pedidoCliente}\r\n                                            name=\"pedidoCliente\"\r\n                                            onChange={this.props.handleChange('pedidoCliente')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Codigo produto\" >\r\n                                        <Input \r\n                                            type=\"text\" \r\n                                            // style={{ width: 120 }}\r\n                                            // value={orderPro.pedidoCliente}\r\n                                            value={this.props.filtros.produto}\r\n                                            name=\"produto\"\r\n                                            onChange={this.props.handleChange('produto')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n\r\n                            <Col lg={4} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"CFOP\" >\r\n                                        <Input \r\n                                            type=\"text\" \r\n                                            // style={{ width: 120 }}\r\n                                            // value={orderPro.pedidoCliente}\r\n                                            name=\"cfop\"\r\n                                            value={this.props.filtros.cfop}\r\n                                            onChange={this.props.handleChange('cfop')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n\r\n                            <Col lg={6} md={6} sm={12} xs={24}>\r\n                                <div className=\"gx-form-row0\">\r\n                                    <Form.Item label=\"Cliente\" >\r\n                                        <Input \r\n                                            type=\"text\" \r\n                                            // style={{ width: 120 }}\r\n                                            // value={orderPro.pedidoCliente}\r\n                                            value={this.props.filtros.empresa}\r\n                                            name=\"empresa\"\r\n                                            onChange={this.props.handleChange('empresa')}\r\n                                            onKeyDown={this.props.onKeyDown}\r\n                                        />\r\n                                    </Form.Item>\r\n                                </div>\r\n                            </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Card, Table, Tag, Spin } from 'antd';\r\nimport moment from 'moment';\r\nimport EllipsisTooltip from 'components/EllipsisTooltip';\r\n// var _ = require('lodash');\r\n// import api from '../../../util/Api';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Pedido Venda',\r\n    dataIndex: 'Número',\r\n    width: 100,\r\n    key: 'key',\r\n    align: 'center',\r\n    // render: (text) => <text>{text}</text>\r\n  },\r\n  // {\r\n  //   title: 'Fornecedor',\r\n  //   dataIndex: 'Fornecedor',\r\n  //   width: 100,\r\n  //   key: 'key',\r\n  //   align: 'center',\r\n  //   // render: (text) => <text>{text}</text>\r\n  // },\r\n  {\r\n    title: 'Pedido Cliente',\r\n    dataIndex: 'Pedido do Cliente',\r\n    // key:'Pedido do Cliente'\r\n  },\r\n  {\r\n    title: 'Emissão',\r\n    dataIndex: 'Emissão',\r\n    //  key:'Emissão',\r\n    render: (text) => moment(text).format('DD-MM-YYYY'),\r\n  },\r\n  {\r\n    title: 'Cliente',\r\n    dataIndex: 'Empresa',\r\n    //  key:'Empresa'\r\n  },\r\n  {\r\n    title: 'Código Produto',\r\n    dataIndex: 'Produto',\r\n    //  key:'Produto'\r\n  },\r\n  {\r\n    title: 'Descrição',\r\n    dataIndex: 'LINHA01',\r\n    //   key:'LINHA01',\r\n\r\n    onCell: () => {\r\n      return {\r\n        style: {\r\n          whiteSpace: 'nowrap',\r\n          maxWidth: 150,\r\n        },\r\n      };\r\n    },\r\n    render: (text, obj) => (\r\n      <EllipsisTooltip title={obj.LINHA01 + ' ' + obj.LINHA02}>\r\n        {obj.LINHA01 + ' ' + obj.LINHA02}\r\n      </EllipsisTooltip>\r\n    ),\r\n  },\r\n  {\r\n    title: 'Quantidade',\r\n    dataIndex: 'qty',\r\n    // key:'qty',\r\n    align: 'center',\r\n  },\r\n  {\r\n    title: 'Produto',\r\n    dataIndex: 'isProdutoOk',\r\n    //  key:'isProdutoOk',\r\n    align: 'center',\r\n    render: (text) => {\r\n      if (text === 0) {\r\n        return <Tag color=\"gold\">Pendente</Tag>;\r\n      } else {\r\n        return <Tag color=\"green\">Ok</Tag>;\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: 'Arvore Kit',\r\n    dataIndex: 'isKitOk',\r\n    //  key:'isKitOk',\r\n    align: 'center',\r\n    render: (text) => {\r\n      if (text === 1) {\r\n        return <Tag color=\"green\">Ok</Tag>;\r\n      } else {\r\n        return <Tag color=\"gold\">Pendente</Tag>;\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: 'Cliente',\r\n    dataIndex: 'isClienteOk',\r\n    //  key:'isClienteOk',\r\n    align: 'center',\r\n    render: (text, record) => {\r\n      if (text === 0) {\r\n        return <Tag color=\"gold\">Pendente</Tag>;\r\n      } else {\r\n        return <Tag color=\"green\">Ok</Tag>;\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: 'Etapa',\r\n    dataIndex: 'isEtapaOk',\r\n    //  key:'isEtapaOk',\r\n    align: 'center',\r\n    render: (text, record) => {\r\n      if (text === 0) {\r\n        return <Tag color=\"red\">Sem Etapa</Tag>;\r\n      } else {\r\n        return <Tag color=\"green\">Ok</Tag>;\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: 'Dados basicos',\r\n    dataIndex: 'isDadosBaseOk',\r\n    //  key:'isDadosBaseOk',\r\n    align: 'center',\r\n    width: 150,\r\n    render: (text, record) => {\r\n      if (text === 0) {\r\n        return <Tag color=\"red\">Pend. dados básicos</Tag>;\r\n      } else {\r\n        return <Tag color=\"green\">Ok</Tag>;\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: 'OP Gerada',\r\n    dataIndex: 'isOrdemOk',\r\n    //   key:'isOrdemOk',\r\n    align: 'center',\r\n    render: (text, record) => {\r\n      if (text === 0) {\r\n        return <Tag color=\"red\">Sem Ordem</Tag>;\r\n      } else {\r\n        return <Tag color=\"green\">Ok</Tag>;\r\n      }\r\n    },\r\n  },\r\n  {\r\n    title: 'Tipo Registro',\r\n    dataIndex: 'Tipo de Registro',\r\n    width: 100,\r\n    key: 'key',\r\n    align: 'center',\r\n    // render: (text) => <text>{text}</text>\r\n  },\r\n  {\r\n    title: 'Cnpj/Cpf',\r\n    dataIndex: 'cnpj_cpf',\r\n    //   key:'cnpj_cpf'\r\n  },\r\n  {\r\n    title: 'Razao Social',\r\n    dataIndex: 'razao',\r\n    onCell: () => {\r\n      return {\r\n        style: {\r\n          whiteSpace: 'nowrap',\r\n          maxWidth: 150,\r\n        },\r\n      };\r\n    },\r\n    render: (text) => <EllipsisTooltip title={text}>{text}</EllipsisTooltip>,\r\n    //   key:'razao'\r\n  },\r\n\r\n  {\r\n    title: 'CFOP',\r\n    dataIndex: 'cfop',\r\n    width: 75,\r\n    align: 'center' \r\n    // key:'cfop',\r\n  },\r\n];\r\n\r\n/**\r\n * Esse componente ira receber uma lista de resultados do fox, e ira apresentar num table.\r\n * @param resultaData É o array com os dados a serem apresentados\r\n * @type component\r\n * @author luiz.garcia\r\n * @since 30/07/2020\r\n */\r\nexport default class ImportOrdersFoxResults extends Component {\r\n  constructor(props) {\r\n    super();\r\n    // this.state = {\r\n    //     selectedRowKeys: []\r\n    // }\r\n    // this.data = [...props.resultData];\r\n  }\r\n\r\n  // onSelectChange = selectedRowKeys => {\r\n  //     this.setState({selectedRowKeys});\r\n  // }\r\n\r\n  render() {\r\n    // const { selectedRowKeys } = this.props;\r\n    return (\r\n      <Spin spinning={false}>\r\n        <Card type=\"inner\" title=\"Ordens Filtras a gerar\">\r\n          <Table\r\n            scroll={{ x: 2500, y: 2000 }}\r\n            rowSelection={{\r\n              selectedRowKeys: this.props.selectedRowKeys,\r\n              onChange: this.props.onSelectChange,\r\n              fixed: true\r\n            }}\r\n            columns={columns}\r\n            onChange={this.props.onChangePage}\r\n            sorter={true}\r\n            bordered\r\n            size=\"small\"\r\n            dataSource={this.props.resultData}\r\n            style={{ margin: '-15px -24px' }}\r\n            loading={this.props.loading}\r\n            rowKey={(record) => record.key}\r\n          />\r\n        </Card>\r\n      </Spin>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport {Modal, Card, Timeline, Button} from 'antd';\r\n\r\nexport default class Log extends React.Component {\r\n    render() {\r\n        return(\r\n            <Modal\r\n                title=\"Logs\"\r\n                visible={this.props.showLog}\r\n                onOk={this.props.onOkLog}\r\n                onCancel={this.props.onOkLog}\r\n                // onCancel={this.props.onCancel}\r\n                bodyStyle={{padding: 0 }}\r\n                // confirmLoading={this.props.confirmLoading}\r\n                footer={[\r\n                    <Button key=\"submit\" type=\"primary\" onClick={this.props.onOkLog}>\r\n                      Ok\r\n                    </Button>\r\n                ]}\r\n            >\r\n                <Card title=\"\" className=\"gx-card\">\r\n                    <Timeline>\r\n                        {\r\n                            this.props.logs.map(function(item) {\r\n                                var x = item.toString();\r\n                                return <Timeline.Item color={x.includes('não tem') ? \"red\": \"green\"}>{item}</Timeline.Item>        \r\n                            })\r\n                        }\r\n                        {/* <Timeline.Item color=\"green\">Create a services site 2015-09-01</Timeline.Item>\r\n                        <Timeline.Item color=\"red\">\r\n                        <p>Solve initial network problems 1</p>\r\n                        <p>Solve initial network problems 2</p>\r\n                        <p>Solve initial network problems 3 2015-09-01</p>\r\n                        </Timeline.Item>\r\n                        <Timeline.Item>\r\n                        <p>Technical testing 1</p>\r\n                        <p>Technical testing 2</p>\r\n                        <p>Technical testing 3 2015-09-01</p>\r\n                        </Timeline.Item> */}\r\n                    </Timeline>\r\n                </Card>\r\n            </Modal>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {Row, Col, Card, Spin, Button, message} from 'antd';\r\nimport ImportOrdersFoxForm from './ImportOrdersFoxForm';\r\nimport ImportOrdersFoxResults from './ImportOrdersFoxResults';\r\nimport api from 'util/Api';\r\nimport apiAdonis from 'util/ApiAdonis';\r\nimport Log from './Log';\r\n\r\napi.defaults.timeout = 60000000;\r\napiAdonis.defaults.timeout = 60000000000000000;\r\n\r\nclass ImportOrdersFox extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loading:false,\r\n            loadingTip: '',\r\n            canGenerate: false,\r\n            resultsLoading: false,\r\n            showLog: false,\r\n            resultData: [],\r\n            array: [],\r\n            array2:[],\r\n            selectedRowKeys: [],\r\n            selectedRows: [],\r\n            filtros: {\r\n                pedido: '',\r\n                pedidoCliente: '',\r\n                cfop:'',\r\n                produto: '',\r\n                empresa: '',\r\n                dataInicio: '',\r\n                dataFim: '',\r\n                dataInicioM: '',\r\n                dataFimM: ''\r\n            },\r\n            logs: []\r\n        };\r\n\r\n        //this.setState({logs: this.state.logs.push('Criado produto 1', 'criado produto 2', 'criado produto 3')}); \r\n        \r\n        // console.log('Import Ordens Fox....');\r\n    }\r\n\r\n    handleChange = name => value => {\r\n        let filtros = this.state.filtros;\r\n\r\n        if(typeof(value) === \"object\") {\r\n            if(name === 'dataInicio' || name === 'dataFim') {\r\n                if(value){\r\n                    filtros[name] = value.format('YYYY-MM-DD');\r\n                }\r\n            }else {\r\n                filtros[name] = value.target.value;\r\n            }\r\n        }else {\r\n            filtros[name] = value;\r\n        }\r\n\r\n        this.setState({filtros});\r\n    }\r\n\r\n    onChangePage = (page, pageSize) => {\r\n        console.log(page, pageSize);\r\n    }\r\n\r\n    onHandleClickSearch = () => {\r\n        this.setState({resultsLoading: true});\r\n        let parent = this;\r\n\r\n        this.setState({resultData: [], selectedRowKeys: []});\r\n\r\n        // console.log(this.state.filtros);\r\n        \r\n        api.get(`Fox/`, {\r\n            params: this.state.filtros\r\n        })\r\n        .then( (result) => {\r\n            \r\n            parent.setState({\r\n                resultData: result.data.filter(op => op.isOrdemOk !== 1)\r\n            });\r\n\r\n            // for (const iterator of result.data) {\r\n            //     const req = await api({\r\n            //         method: \"GET\",\r\n            //         url: `Fox/checkClient`,\r\n            //         params: iterator.Empresa\r\n            //     });\r\n        \r\n            //     if(req){\r\n            //         if(req.data === \"pendente\"){\r\n            //             iterator.isClienteOk = \"pendente\"\r\n            //         }else{\r\n            //             iterator.isClienteOk = req.data.name\r\n            //         }\r\n            //     }\r\n            // }\r\n            message.success('Registros carregados.');\r\n        },)\r\n        .catch(function(error) {\r\n            message.error('Erro ao buscar registro, tente novamente mais tarde!:'+error.message);\r\n            console.log('error', error)\r\n        })\r\n        .then(function () {\r\n            // always executed\r\n            parent.setState({resultsLoading: false});\r\n        });\r\n    }\r\n        \r\n    onSelectChange = (selectedRowKeys,selectedRows) => {\r\n        // console.log('selectedRowKeys');\r\n        // console.log(selectedRowKeys, selectedRows);\r\n        this.setState({selectedRowKeys, selectedRows});\r\n\r\n        this.checkIfAllstatusIsOk(selectedRows);\r\n    }\r\n\r\n    /**\r\n    * Função que é usava para quando usuario apertar ENTER no teclado ele realizar a pesquisar\r\n    **/\r\n    onKeyDown =(e) =>{\r\n        if (e.key === 'Enter') {\r\n            this.onHandleClickSearch();\r\n        }\r\n    }\r\n\r\n    onCreateBasicData = async  () => {\r\n        this.setState({resultsLoading: true});\r\n        let selectRows = this.state.selectedRows;\r\n        let parent = this;\r\n        let METHOD = \"POST\";\r\n\r\n        await api({\r\n            method: METHOD,\r\n            url: `Fox/createBasicData`,\r\n            data: {\r\n                rows: selectRows\r\n            }\r\n        }).then(function(result){\r\n            parent.setState({\r\n                resultData: [],\r\n                showLog: true,\r\n                logs: result.data,\r\n                resultsLoading: false\r\n            });\r\n\r\n            message.success('Registros Criados Ou Alterados.');\r\n        })\r\n        .catch(function(error) {\r\n            message.error('Erro interno, tente novamente mais tarde!:'+error.message);\r\n            console.log('error', error)\r\n        })\r\n        .then(function(e) {\r\n            // always executed\r\n            parent.setState({resultsLoading: false});\r\n        });\r\n\r\n        // if(req){\r\n            \r\n        // }else{\r\n        //     message.error(\"ERRO\");\r\n        // }\r\n    }\r\n\r\n    onCreateOrders = async () => {\r\n\r\n        console.log('onCreateOrders....');\r\n\r\n        this.setState({resultsLoading: true});\r\n        let selectRows = this.state.selectedRows;\r\n        let parent = this;\r\n        \r\n        let METHOD = \"POST\";\r\n        try {\r\n            // await apiAdonis({\r\n            //     method: METHOD,\r\n            //     url: `oncreateOrders`,\r\n            //     data: {\r\n            //         rows: selectRows\r\n            //     }\r\n\r\n\r\n            const result = await apiAdonis.post('oncreateOrders',{\r\n            rows: selectRows\r\n            });\r\n\r\n            if(result){\r\n                parent.setState({\r\n                    resultData: [],\r\n                    showLog: true,\r\n                    logs: result.data !== undefined ? result.data : [],\r\n                    array:[]\r\n                })\r\n    \r\n                if(result.data.find(spe => spe.includes('não tem'))){\r\n                    message.error('Kits filhos nao tem Etapas !');\r\n                }else{\r\n                    message.success('Ordens criadas !');\r\n                }\r\n            }\r\n\r\n\r\n            // await apiAdonis.post(\r\n            //     'oncreateOrders',\r\n            //     {\r\n            //       rows: selectRows\r\n            // }).then((result) => {\r\n            //     parent.setState({\r\n            //         resultData: [],\r\n            //         showLog: true,\r\n            //         logs: result.data !== undefined ? result.data : [],\r\n            //         array:[]\r\n            //     })\r\n    \r\n            //     if(result.data.find(spe => spe.includes('não tem'))){\r\n            //         message.error('Kits filhos nao tem Etapas !');\r\n            //     }else{\r\n            //         message.success('Ordens criadas !');\r\n            //     }\r\n            // }).catch((error) => {\r\n            //     message.error('Erro interno, tente novamente mais tarde!:'+error.message);\r\n            //     console.log('error', error)\r\n            // });\r\n\r\n\r\n            // }).then((e) => {\r\n            //     // always executed\r\n            //     alert('finish...');\r\n            //     parent.setState({resultsLoading: false});\r\n            // });    \r\n        } catch (error) {\r\n            message.error('Erro interno, tente novamente mais tarde!:'+error.message);\r\n            console.log('error', error)\r\n        }\r\n        parent.setState({resultsLoading: false});\r\n    }\r\n\r\n    /**\r\n     * Para fechar o modal do log\r\n     */\r\n    onOkLog = () => {\r\n        this.setState({\r\n            showLog: false, \r\n        });\r\n    }\r\n\r\n    checkIfAllstatusIsOk = (selectedRows) => {\r\n        let listaDeSelects = selectedRows;\r\n\r\n        if(listaDeSelects.length === 0){\r\n            this.setState({\r\n                array: []\r\n            })\r\n        }else{\r\n            let array = [];\r\n            for (const iterator of listaDeSelects) {\r\n                if(iterator.isProdutoOk === 1 && \r\n                   iterator.isKitOk === 1 && \r\n                   iterator.isClienteOk === 1 && \r\n                   iterator.isEtapaOk === 1 && \r\n                   iterator.isOrdemOk === 0 &&\r\n                   iterator.isDadosBaseOk === 1){\r\n                    array.push(iterator);\r\n                    this.setState({\r\n                        array: array\r\n                    });\r\n                }\r\n            }\r\n            if(array.length === listaDeSelects.length){\r\n\r\n            }else{\r\n                this.setState({\r\n                    array: []\r\n                })\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Spin spinning={this.state.loading} tip={this.state.loadingTip}>\r\n            <Log \r\n                showLog={this.state.showLog}\r\n                onOkLog={this.onOkLog}\r\n                logs={this.state.logs}\r\n            />\r\n            <Row>\r\n                <Col lg={20} md={20} sm={24} xs={24}>\r\n                    <ImportOrdersFoxForm \r\n                        handleChange={this.handleChange} \r\n                        filtros={this.state.filtros} \r\n                        onKeyDown={this.onKeyDown}\r\n                    />\r\n                    <ImportOrdersFoxResults \r\n                        resultData={this.state.resultData} \r\n                        loading={this.state.resultsLoading}\r\n                        selectedRowKeys={this.state.selectedRowKeys}\r\n                        onSelectChange={this.onSelectChange}\r\n                        onChangePage={this.onChangePage}\r\n                        />\r\n                </Col>\r\n\r\n                <Col lg={4} md={4} sm={24} xs={24}>\r\n                    <Card type=\"inner\" title=\"Açoes\">\r\n                    <Button \r\n                                block\r\n                                type=\"primary\"\r\n                                // disabled={!this.state.canNew}\r\n                                onClick={this.onHandleClickSearch}\r\n                            >\r\n                                Pesquisar\r\n                            </Button>\r\n                            <Button \r\n                                block\r\n                                type=\"primary\"\r\n                                className=\"gx-btn-secondary\"\r\n                                disabled={!this.state.selectedRows.length > 0}\r\n                                onClick={this.onCreateBasicData}\r\n                            >\r\n                                Gerar Dados Básicos\r\n                            </Button>\r\n\r\n                            <Button \r\n                                block\r\n                                type=\"primary\"\r\n                                className=\"gx-btn-red\"\r\n                                disabled={this.state.array.length === 0  ? true: false}\r\n                                onClick={this.onCreateOrders}\r\n                            >\r\n                                Gerar OP\r\n                            </Button>\r\n\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            </Spin>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImportOrdersFox;\r\n"],"sourceRoot":""}
{"version":3,"sources":["routes/administrator/CadDashboards/ListDashboards.js","routes/administrator/CadDashboards/expert.js","routes/administrator/CadDashboards/index.js"],"names":["columns","title","dataIndex","key","render","text","model","ListTaxaHora","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchLeftList","api","get","concat","then","result","setState","data","catch","error","console","log","state","_this2","react_default","a","createElement","LeftList","onRowClick","record","rowIndex","onClick","event","onClickRow","Component","_","require","Option","Select","CadDashboardsexpert","getMaquinas","dataMaq","taxMaquinas","filter","o","type","listofMaquinas","onHandleClickNew","setStateNew","handleOnClickRow1","parent","assertThisInitialized","loading","loadingTip","setTimeout","id","message","success","setStateEdit","onHandleClickSave","user","listaDeMaquinasSelected","tableList","METHOD","URL","isNew","cod","desc","method","url","leftListChild","current","onCancel","history","replace","document","location","reload","onHandleClickDelete","Modal","confirm","onOk","canSave","canNew","canDelete","jsonMaquinaAdd","machines","handleChange","newUser","target","name","value","ListDashboards","ref","handleMaquina","auxList","obj","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","handleAdd","lista","last","length","objlista","push","Content","className","row","col","span","es_form","layout","size","card","lg","md","sm","xs","Item","label","input","disabled","onChange","table","dataSource","rowKey","style","margin","es_select","width","showSearch","filterOption","inputValue","option","children","toUpperCase","indexOf","map","e","es_button","htmlType","loader","auxthis","marginRight","handleDeleteAddressRow","bind","React","createRef","preventDefault","list","item","spin","spinning","tip","block","CadDashboards","expert"],"mappings":"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","file":"static/js/5.ec478446.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport api from '../../../util/Api';\nimport LeftList from '../../../components/LeftList';\n\nconst columns = [\n    {\n        title: 'Codigo',\n        dataIndex:'cod',\n        key: 'cod',\n        render: text => {\n            return text\n        },\n        //sorter: (a, b) => a.cod.length - b.cod.length,\n    },\n    {\n        title: 'Descrição',\n        dataIndex:'desc',\n        key: 'desc',\n        //sorter: (a, b) => a.valor - b.valor\n        \n    }\n]\n\nconst model = 'dashboards';\n\nclass ListTaxaHora extends Component {\n    constructor(props) {\n        super()\n        // console.log('ListUSers - Constructor')\n        // console.log(props)\n\n        \n        this.state = {\n            data: []\n        };\n    }\n\n    componentDidMount() {\n        // console.log('ComponentDidMout - CustomerList');\n        this.fetchLeftList();\n    } \n\n    fetchLeftList = () => {\n        // console.log('fecthLeftlist');\n        api.get(`${model}/`, {})\n        .then((result) => {\n            this.setState({\n                data: result.data\n            });\n        },)\n        .catch(function(error) {\n            console.log('error', error)\n        })\n    }\n\n\n    render() {\n        return (\n        <div>\n            <LeftList \n                columns={columns} \n                data={this.state.data} \n                onRowClick={(record, rowIndex) => {\n                    return {\n                        onClick : event => this.props.onClickRow(record, rowIndex)\n                    }\n                }}\n            />\n       </div>\n        )\n    }\n};\n\nexport default ListTaxaHora;","import React, {Component} from 'react'\nimport {Row, Col, Card, Form, Input, Button,message,  Modal, Spin, Table , Select} from 'antd'\nimport history from '../../../util/history';\nimport ListTaxaHora from './ListDashboards';\nimport api from '../../../util/Api'\nimport '../Users/maktorTemplate.less'\n\nvar _ = require('lodash');\nconst { Option } = Select;\nconst model = 'Dashboards';\n\n\nclass CadDashboardsexpert extends Component {\n    constructor(){\n        super();\n        this.state = {            \n            isNew: true,\n            loader: true,\n\t\t\tuser: {},\n\t\t\tcanNew: true,\n\t\t\tcanSave: true,\n            canDelete: false,\n            loading: false,\n            listofMaquinas: [],\n            tableList: [],\n            jsonMaquinaAdd: {\n                id: ''\n            },\n        }\n        let auxthis = this;\n        this.columns = [\n        {\n            title: 'Codigo',\n            dataIndex: 'cod',\n        },\n        {\n            title: 'Nome',\n            dataIndex: 'name',\n        },\n        {\n            title: 'Taxa Hora',\n            dataIndex: 'ratetime',\n        },\n        {\n            title: 'Ações',\n            key: 'action',\n            render: (text, record) => (\n                <div>\n                    <i className=\"icon icon-trash\"\n                        style={{marginRight:'10px'}}\n                        onClick={(e) => {\n                            Modal.confirm({\n                                title: 'Tem certeza que deseja remover esta maquina?',\n                                onOk() {\n                                    auxthis.handleDeleteAddressRow(record.id, e);\n                                    message.success(\"Maquina removida\");\n                                },\n                                onCancel() {\n                                }\n                            });\n                            \n                        }}\n                    />\n                </div>\n            )\n        }\n        ]\n\n        this.handleChange = this.handleChange.bind(this);\n        this.setStateNew = this.setStateNew.bind(this);\n        this.onHandleClickSave = this.onHandleClickSave.bind(this);\n        \n        this.onHandleClickDelete = this.onHandleClickDelete.bind(this);\n        this.onHandleClickNew = this.onHandleClickNew.bind(this);\n        // this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.leftListChild = React.createRef();\n\n\n    }\n\n    componentWillMount() {\n        this.getMaquinas();\n    }\n\n    getMaquinas = () => {\n        api.get(`MachineLabor`, {\n        })\n        .then((result) => {\n            let dataMaq = [];\n            dataMaq = result.data;\n\n            let taxMaquinas = _.filter(dataMaq, (o) => {\n                return o.type === \"maquina\" || \"montagem\"\n            })\n            this.setState({\n                listofMaquinas: taxMaquinas\n            });\n\n        },)\n        .catch(function(error) { \n            console.log(error);\n        })\n    }\n\n    onHandleClickNew = () => {\n        this.setStateNew()\n    }\n\n    handleDeleteAddressRow(key, e) {\n        e.preventDefault();\n        const list = this.state.tableList.filter(item => item.id !== key);\n        this.setState({\n            tableList: list\n        });\n    }\n\n    handleOnClickRow1 = (record, rowIndex) => {\n        var parent = this\n        //Primeria coisa ele seta loading para true\n        this.setState({\n            loading:true,\n            loadingTip: 'Carregando registro, aguarde...'\n        })\n\n        //Coloquei esse timeout de 1 segundo para simular o carregamento\n        setTimeout(function(){\n            //Agora ele vai buscar o registro no servidor\n            api.get(`${model}/${record.id}`, {\n                })\n                .then((result) => {\n                    //Caso consiga recuperar o model, ele atualiza a tela e para de carregar\n                    // console.log(result.data.adresses);\n                    // console.log(result.adresses);\n                    message.success('Dashboard carregada com sucesso!');\n                    parent.setStateEdit(result.data)\n                },)\n                .catch(function(error) { \n                    // console.log(error);\n                    message.error('Erro ao buscar registro, tente novamente mais tarde!');\n                    parent.setStateNew()\n                })\n        }, 1000);\n        \n    }\n\n    onHandleClickSave = () => {\n        // console.log(this.state.model);\n        let record = this.state.user;\n        var parent = this;\n\n        let listaDeMaquinasSelected = this.state.tableList;\n\n        this.setState({\n            loading:true,\n            loadingTip: 'Salvando registro, aguarde...',\n        })\n        //Verifica se é uma atualizacao (PUT) ou novo registro (POST)\n        let METHOD = 'PATCH'\n        let URL = `${model}/${record.id}`\n        \n        if(parent.state.isNew){\n            METHOD = 'POST'\n            URL = `${model}`\n            // record = Object.assign({},record)\n        }\n        // console.log('onHandleSaveButton', record);\n        const {cod, desc} = record;\n        api(\n            {\n            method: METHOD,\n            url: URL,\n            data:\n            {\n                cod: cod,\n                desc: desc,\n                listofMaquinas: listaDeMaquinasSelected\n            } \n        }).then((result) => {\n            //Caso consiga recuperar o model, ele atualiza a tela e para de carregar\n            message.success('Dashboard salvo com sucesso!');\n            // console.log(result.data);\n            parent.setStateEdit(result.data)\n            parent.leftListChild.current.fetchLeftList()\n        },)\n        .catch(function(error) { \n            // console.log(error);\n            parent.setStateEdit(record)\n            message.error('Erro ao gravar registro, tente novamente mais tarde!');\n        })\n    }\n\n    onCancel = () => {\n        history.replace('/dashboard');\n        document.location.reload(true);\n    }\n    \n    onHandleClickDelete = () => {\n        // console.log(this.state.model);\n        let record = this.state.user\n        var parent = this\n\n        Modal.confirm({\n            title: 'Tem certeza que deseja excluir esse registro?',\n            onOk() {\n                parent.setState({\n                    loading:true,\n                    loadingTip: 'Excluindo registro, aguarde...',\n                })\n                setTimeout(function(){\n                    //Agora ele vai buscar o registro no servidor\n                    let METHOD = 'DELETE'\n                    let URL = `${model}/${record.id}`\n                    api({\n                        method: METHOD,\n                        url: URL,\n                    }).then((result) => {\n                        //Caso consiga recuperar o model, ele atualiza a tela e para de carregar\n                        message.success('Registro excluido com sucesso!');\n                        parent.setStateNew()\n                        parent.leftListChild.current.fetchLeftList()\n                    },)\n                    .catch(function(error) { \n                        // console.log(error);\n                        message.error('Erro ao excluir registro, tente novamente mais tarde!');\n                    })\n                }, 1000);\n                parent.setStateNew()\n            },\n            onCancel() {\n                //Nada acontece\n            },\n          });\n    }\n\n    setStateNew = () => {\n        this.setState({ \n            canSave: true,\n            canNew: true,\n            canDelete: false,\n            user: {},\n            loading: false,\n            isNew: true,\n            tableList: [],\n            jsonMaquinaAdd:{\n                id:''\n            }\n        });\n    }\n\n    //Seta o estado para edição\n    setStateEdit = (model) => {\n        this.setState({ \n            canSave: true,\n            canNew: true,\n            canDelete: true,\n            user: model,\n            loading: false,\n            isNew: false,\n            tableList: model.machines,\n            jsonMaquinaAdd: {\n                id: ''\n            }\n        });\n    }\n\n    handleChange = event => {\n        let newUser = this.state.user;\n        newUser[event.target.name] = event.target.value;\n\n        this.setState(() => ({\n            user: newUser\n        }))\n    }\n\n    LeftList = () => {\n        return (\n            <ListTaxaHora onClickRow={this.handleOnClickRow1}  ref={this.leftListChild} />\n        )\n    }\n\n      handleMaquina = (event) => {\n        let auxList = this.state.listofMaquinas;\n        let obj = {}\n\n        for (const iterator of auxList) {\n            if(event === iterator.id){\n                obj = iterator\n            }\n        }\n\n        this.setState({\n            jsonMaquinaAdd: obj\n        })\n      }\n\n      handleAdd = () => {\n        let lista = this.state.tableList;\n        let obj = this.state.jsonMaquinaAdd;\n        let last = lista[lista.length - 1];\n\n        let objlista = obj;\n        if(lista.length === 0){\n            objlista[\"key\"] = 0 ;\n        }else{\n            objlista[\"key\"] = last.key + 1;\n        }\n\n        lista.push(objlista);\n        this.setState({\n            tableList: lista\n        });\n        message.success(\"Maquina adicionada !\");\n      }\n\n    Content = (user) => {\n\n        return (\n            <div className=\"main\">\n                <Row>\n                    <Col span={24}>\n                        <Form layout=\"horizontal\" size=\"small\" >\n                            <Card type=\"inner\" title=\"Cadastro de Dashboards\">\n                                <Row>\n                                    <Col lg={6} md={8} sm={12} xs={24} >\n                                        <div className=\"gx-form-row0\">\n                                            <Form.Item label=\"Código\">\n                                                    <Input \n                                                        type=\"text\" \n                                                        value={user.cod}\n                                                        name=\"cod\"\n                                                        disabled={this.state.isNew ? false : true}\n                                                        onChange={this.handleChange}/>\n                                            </Form.Item>\n                                        </div>\n                                    </Col>\n\n                                    <Col lg={6} md={8} sm={12} xs={24} >\n                                        <div className=\"gx-form-row0\">\n                                            <Form.Item label=\"Descrição\">\n                                                    <Input \n                                                        type=\"text\" \n                                                        value={user.desc}\n                                                        name=\"desc\"\n                                                        onChange={this.handleChange}/>\n                                            </Form.Item>\n                                        </div>\n                                    </Col>\n\n                                </Row>\n                            </Card>\n\n                            <Card type=\"inner\" title=\"Maquinas\" >\n\n                                <Table  \n                                    className=\"gx-table-responsive\"\n                                    dataSource={this.state.tableList}\n                                    size=\"small\"\n                                    rowKey=\"id\"\n                                    style={{margin: '-15px -24px'}}\n                                    columns={this.columns}  />\n\n                            </Card>\n\n                            <Card type=\"inner\" title=\"Adicionar Maquinas\" >\n                                <Row>\n                                <Col lg={6} md={6} sm={12} xs={24}>\n                                        <div className=\"gx-form-row0\">\n                                            <Form.Item label=\"Maquinas\">\n                                                <Select\n                                                    style={{width: 400}} \n                                                    showSearch \n                                                    value={this.state.jsonMaquinaAdd.id} \n                                                    onChange={this.handleMaquina} \n                                                    filterOption={(inputValue, option) =>\n                                                        // console.log(inputValue)\n                                                        option.props.children[0].concat(option.props.children[1],option.props.children[2]).toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                                                    }\n                                                    >\n                                                    {\n                                                        this.state.listofMaquinas.map( e => {\n                                                            return (\n                                                            <Option value={e.id}>{e.cod}-{e.name}</Option>\n                                                            ) \n                                                        })\n                                                    }\n                                                </Select>\n                                            </Form.Item>\n                                        </div>\n                                    </Col>\n                                </Row>\n                                <br/><br/>\n                                <Row>\n                                <Col lg={6} md={6} sm={12} xs={24}>\n                                        <div className=\"gx-form-row0\">\n                                                <Button \n                                                    type=\"primary\"\n                                                    htmlType=\"submit\"\n                                                    disabled={false}\n                                                    onClick={this.handleAdd}\n                                                    >\n                                                    Adicionar Maquina\n                                                </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Card>\n                            \n                        </Form>\n                    </Col>\n                </Row>\n            </div>\n        )\n\n\t}\n\n\n    render() {\n        return (\n            <Spin spinning={this.state.loading} tip={this.state.loadingTip}>\n                <Row>\n                    <Col lg={5} md={5} sm={24} xs={24}>\n                            {this.LeftList()}\n                    </Col>\n\n                    <Col lg={15} md={15} sm={24} xs={24}>\n                        {this.Content(this.state.user)}\n                    </Col>\n\n                    <Col lg={4} md={4} sm={24} xs={24}>\n                        <Card type=\"inner\" title=\"Dashboards\">\n                            <Button \n                                block\n                                type=\"primary\"\n                                className=\"gx-btn-secondary\"\n                                disabled={!this.state.canNew}\n                                onClick={this.onHandleClickNew}\n                            >\n                                Novo\n                            </Button>\n                            <Button \n                                block\n                                type=\"primary\"\n                                onClick={this.onHandleClickSave}\n                                disabled={!this.state.canSave}\n                            >\n                                Salvar\n                            </Button>\n                            <br/>\n                            <Button \n                                block\n                                disabled={!this.state.canDelete} \n                                type=\"primary\"\n                                onClick={this.onHandleClickDelete}\n                                className=\"gx-btn-red\"\n                            >\n                                Excluir\n                            </Button>\n                        </Card>\n                    </Col>\n                </Row>\n            </Spin>\n        )\n    }\n}\n\nexport default CadDashboardsexpert","import React from 'react'\nimport UsersExpert from './expert'\n\n// const TabPane = Tabs.TabPane\n\n\nconst CadDashboards = () => {\n    return (\n        <UsersExpert />\n    )\n};\n\nexport default CadDashboards;"],"sourceRoot":""}